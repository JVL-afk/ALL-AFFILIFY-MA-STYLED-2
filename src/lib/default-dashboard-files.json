[
  {
    "path": "src/app/dashboard/ab-testing/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  TestTube, \n  Plus, \n  Play, \n  Pause, \n  BarChart3, \n  TrendingUp, \n  Users, \n  MousePointer,\n  Eye,\n  Target,\n  Crown,\n  Sparkles,\n  Calendar,\n  CheckCircle,\n  AlertCircle,\n  Clock,\n  Zap,\n  Type,\n  Layout,\n  Palette,\n  Image,\n  Globe\n} from 'lucide-react'\n\ninterface ABTest {\n  id: string\n  name: string\n  description: string\n  websiteId: string\n  websiteName: string\n  status: 'draft' | 'running' | 'paused' | 'completed'\n  type: 'headline' | 'cta' | 'layout' | 'color' | 'image' | 'full-page'\n  variants: {\n    id: string\n    name: string\n    description: string\n    traffic: number // percentage\n    conversions: number\n    visitors: number\n    conversionRate: number\n    isControl: boolean\n  }[]\n  metrics: {\n    primaryGoal: 'clicks' | 'conversions' | 'revenue' | 'signups'\n    confidenceLevel: number\n    statisticalSignificance: boolean\n    winner?: string\n  }\n  schedule: {\n    startDate: string\n    endDate?: string\n    duration: number // days\n  }\n  createdAt: string\n  updatedAt: string\n}\n\ninterface ABTestStats {\n  totalTests: number\n  runningTests: number\n  completedTests: number\n  totalVisitors: number\n  averageUplift: number\n  significantWins: number\n}\n\nexport default function ABTestingPage() {\n  const [tests, setTests] = useState<ABTest[]>([])\n  const [stats, setStats] = useState<ABTestStats | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [selectedTest, setSelectedTest] = useState<ABTest | null>(null)\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n\n  // Temporarily remove Enterprise plan restriction for testing\n  const [hasEnterpriseAccess, setHasEnterpriseAccess] = useState(false)\n\n  useEffect(() => {\ncheckEnterpriseAccess()\n    if (hasEnterpriseAccess) {\n      loadTests()\n      loadStats()\n    }\n  }, [])\n\n  const checkEnterpriseAccess = async () => {\n    try {\n      const response = await fetch('/api/auth/me')\n      if (response.ok) {\n        const data = await response.json()\n        setHasEnterpriseAccess(data.user.plan === 'enterprise')\n      }\n    } catch (error) {\n      console.error('Error checking access:', error)\n    }\n  }\n\n  const loadTests = async () => {\n    try {\n      const response = await fetch('/api/ab-tests')\n      if (response.ok) {\n        const data = await response.json()\n        setTests(data.tests)\n      }\n    } catch (error) {\n      console.error('Error loading tests:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadStats = async () => {\n    try {\n      const response = await fetch('/api/ab-tests/stats')\n      if (response.ok) {\n        const data = await response.json()\n        setStats(data.stats)\n      }\n    } catch (error) {\n      console.error('Error loading stats:', error)\n    }\n  }\n\n  const startTest = async (testId: string) => {\n    try {\n      const response = await fetch(`/api/ab-tests/${testId}/start`, {\n        method: 'POST'\n      })\n\n      if (response.ok) {\n        setSuccess('A/B test started successfully')\n        await loadTests()\n        await loadStats()\n      }\n    } catch (error) {\n      setError('Failed to start test')\n    }\n  }\n\n  const pauseTest = async (testId: string) => {\n    try {\n      const response = await fetch(`/api/ab-tests/${testId}/pause`, {\n        method: 'POST'\n      })\n\n      if (response.ok) {\n        setSuccess('A/B test paused')\n        await loadTests()\n      }\n    } catch (error) {\n      setError('Failed to pause test')\n    }\n  }\n\n  const completeTest = async (testId: string, winnerId: string) => {\n    try {\n      const response = await fetch(`/api/ab-tests/${testId}/complete`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ winnerId })\n      })\n\n      if (response.ok) {\n        setSuccess('A/B test completed and winner applied')\n        await loadTests()\n        await loadStats()\n      }\n    } catch (error) {\n      setError('Failed to complete test')\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'bg-green-100 text-green-800'\n      case 'paused':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'completed':\n        return 'bg-blue-100 text-blue-800'\n      case 'draft':\n        return 'bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-800'\n      default:\n        return 'bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-800'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running':\n        return <Play className=\"w-4 h-4\" />\n      case 'paused':\n        return <Pause className=\"w-4 h-4\" />\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4\" />\n      case 'draft':\n        return <Clock className=\"w-4 h-4\" />\n      default:\n        return <Clock className=\"w-4 h-4\" />\n    }\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'headline':\n        return <Type className=\"w-4 h-4\" />\n      case 'cta':\n        return <MousePointer className=\"w-4 h-4\" />\n      case 'layout':\n        return <Layout className=\"w-4 h-4\" />\n      case 'color':\n        return <Palette className=\"w-4 h-4\" />\n      case 'image':\n        return <Image className=\"w-4 h-4\" />\n      case 'full-page':\n        return <Globe className=\"w-4 h-4\" />\n      default:\n        return <TestTube className=\"w-4 h-4\" />\n    }\n  }\n\n  // Enterprise access gate\n  if (!hasEnterpriseAccess) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"max-w-2xl mx-auto text-center py-12\">\n          <div className=\"w-16 h-16 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <TestTube className=\"w-8 h-8 text-gray-900\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Enterprise Feature</h1>\n          <p className=\"text-gray-600 mb-6\">\n            A/B Testing is available exclusively for Enterprise plan users. \n            Upgrade your plan to access advanced split testing, statistical analysis, and conversion optimization features.\n          </p>\n          <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-6 mb-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Enterprise A/B Testing Features:</h3>\n            <ul className=\"text-left text-gray-700 space-y-2\">\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Advanced split testing engine</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Statistical significance analysis</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Multiple variant testing</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Real-time performance monitoring</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Automated winner selection</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Conversion funnel optimization</li>\n            </ul>\n          </div>\n          <a href=\"/pricing?upgrade=enterprise&feature=A/B Testing\" className=\"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white h-10 py-2 px-4\">\n            <Crown className=\"w-4 h-4 mr-2\" />\n            Upgrade to Enterprise\n          </a>\n        </div>\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">A/B Testing</h1>\n            <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-gray-900 px-2 py-1 rounded-full text-xs font-medium flex items-center\">\n              <Crown className=\"w-3 h-3 mr-1\" />\n              Enterprise\n            </div>\n          </div>\n          <p className=\"text-gray-600\">Optimize your websites with data-driven split testing</p>\n        </div>\n        <Button onClick={() => setShowCreateModal(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Test\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Tests</CardTitle>\n              <TestTube className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalTests}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats.runningTests} running\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.completedTests}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats.significantWins} significant wins\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Visitors</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalVisitors?.toLocaleString() || \"0\"}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Across all tests\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg. Uplift</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">+{(stats?.averageUplift?.toFixed(1) || \"0.0\")}%</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Conversion improvement\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Win Rate</CardTitle>\n              <Target className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {(stats?.completedTests > 0 ? ((stats?.significantWins / stats?.completedTests) * 100)?.toFixed(1) : '0') || '0'}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Significant results\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Running</CardTitle>\n              <Play className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.runningTests}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Active tests\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Tests List */}\n      <div className=\"space-y-4\">\n        {tests.map((test) => (\n          <Card key={test.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <h3 className=\"text-lg font-semibold\">{test.name}</h3>\n                    <div className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(test.status)}`}>\n                      {getStatusIcon(test.status)}\n                      <span>{test.status}</span>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 mb-2\">{test.description}</p>\n                  <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                    <span className=\"flex items-center gap-1\">\n                      {getTypeIcon(test.type)}\n                      {test.type.charAt(0).toUpperCase() + test.type.slice(1)} Test\n                    </span>\n                    <span>Website: {test.websiteName}</span>\n                    <span>Goal: {test.metrics.primaryGoal}</span>\n                    <span>\n                      <Calendar className=\"w-4 h-4 inline mr-1\" />\n                      {test.schedule.duration} days\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  {test.status === 'draft' && (\n                    <Button\n                      size=\"sm\"\n                      onClick={() => startTest(test.id)}\n                    >\n                      <Play className=\"w-4 h-4 mr-1\" />\n                      Start\n                    </Button>\n                  )}\n                  \n                  {test.status === 'running' && (\n                    <>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => pauseTest(test.id)}\n                      >\n                        <Pause className=\"w-4 h-4 mr-1\" />\n                        Pause\n                      </Button>\n                      {test.metrics.statisticalSignificance && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"default\"\n                          onClick={() => {\n                            const winner = test.variants.reduce((prev, current) => \n                              prev.conversionRate > current.conversionRate ? prev : current\n                            )\n                            completeTest(test.id, winner.id)\n                          }}\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-1\" />\n                          Complete\n                        </Button>\n                      )}\n                    </>\n                  )}\n                  \n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => setSelectedTest(test)}\n                  >\n                    <BarChart3 className=\"w-4 h-4 mr-1\" />\n                    View Results\n                  </Button>\n                </div>\n              </div>\n\n              {/* Variants Performance */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {test.variants.map((variant) => (\n                  <div\n                    key={variant.id}\n                    className={`p-4 rounded-lg border-2 ${\n                      test.metrics.winner === variant.id\n                        ? 'border-green-500 bg-green-50'\n                        : variant.isControl\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">\n                        {variant.name}\n                        {variant.isControl && (\n                          <span className=\"ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full\">\n                            Control\n                          </span>\n                        )}\n                        {test.metrics.winner === variant.id && (\n                          <span className=\"ml-2 text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full\">\n                            Winner\n                          </span>\n                        )}\n                      </h4>\n                      <span className=\"text-sm text-gray-500\">{variant.traffic}%</span>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Visitors:</span>\n                        <span className=\"font-medium\">{variant.visitors?.toLocaleString() || \"0\"}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Conversions:</span>\n                        <span className=\"font-medium\">{variant.conversions?.toLocaleString() || \"0\"}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Conv. Rate:</span>\n                        <span className=\"font-medium\">{(variant?.conversionRate?.toFixed(2) || \"0.00\")}%</span>\n                      </div>\n                      \n                      {!variant.isControl && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Uplift:</span>\n                          <span className={`font-medium ${\n                            variant.conversionRate > test.variants.find(v => v.isControl)!.conversionRate\n                              ? 'text-green-600'\n                              : 'text-red-600'\n                          }`}>\n                            {(((variant?.conversionRate || 0) / (test?.variants?.find(v => v.isControl)?.conversionRate || 1) - 1) * 100)?.toFixed(1) || \"0.0\"}%\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Statistical Significance */}\n              {test.status === 'running' && (\n                <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-yellow-600\" />\n                      <span className=\"text-sm font-medium text-yellow-800\">\n                        Statistical Significance: {test.metrics.confidenceLevel}%\n                      </span>\n                    </div>\n                    {test.metrics.statisticalSignificance ? (\n                      <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full\">\n                        Significant\n                      </span>\n                    ) : (\n                      <span className=\"text-xs bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-800 px-2 py-1 rounded-full\">\n                        Need more data\n                      </span>\n                    )}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {tests.length === 0 && (\n        <div className=\"text-center py-12\">\n          <TestTube className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No A/B tests yet</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Start optimizing your websites with data-driven split testing.\n          </p>\n          <div className=\"mt-6\">\n            <Button onClick={() => setShowCreateModal(true)}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Your First Test\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Create Test Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-xl font-bold\">Create A/B Test</h2>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowCreateModal(false)}\n              >\n                ×\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Test Name</label>\n                <Input placeholder=\"e.g., Homepage Headline Test\" />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Description</label>\n                <Input placeholder=\"Brief description of what you're testing\" />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Test Type</label>\n                <select className=\"w-full p-2 border rounded-md\">\n                  <option value=\"headline\">Headline Test</option>\n                  <option value=\"cta\">Call-to-Action Test</option>\n                  <option value=\"layout\">Layout Test</option>\n                  <option value=\"color\">Color Test</option>\n                  <option value=\"image\">Image Test</option>\n                  <option value=\"full-page\">Full Page Test</option>\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Primary Goal</label>\n                <select className=\"w-full p-2 border rounded-md\">\n                  <option value=\"clicks\">Clicks</option>\n                  <option value=\"conversions\">Conversions</option>\n                  <option value=\"revenue\">Revenue</option>\n                  <option value=\"signups\">Sign-ups</option>\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Test Duration (days)</label>\n                <Input type=\"number\" placeholder=\"14\" min=\"1\" max=\"90\" />\n              </div>\n              \n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h3 className=\"font-medium text-blue-900 mb-2\">Variants</h3>\n                <p className=\"text-sm text-blue-700 mb-3\">\n                  You'll be able to configure your test variants after creating the test.\n                </p>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-blue-600 rounded-full\"></div>\n                    <span>Control (Original)</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-600 rounded-full\"></div>\n                    <span>Variant A (New Version)</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-3 mt-6\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowCreateModal(false)}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  setShowCreateModal(false)\n                  setSuccess('A/B test created successfully! You can now configure variants and start testing.')\n                }}\n                className=\"flex-1\"\n              >\n                Create Test\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Success/Error Messages */}\n      {success && (\n        <div className=\"fixed bottom-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50\">\n          <div className=\"flex items-center\">\n            <CheckCircle className=\"w-4 h-4 mr-2\" />\n            {success}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSuccess('')}\n              className=\"ml-2 p-1\"\n            >\n              ×\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"fixed bottom-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50\">\n          <div className=\"flex items-center\">\n            <AlertCircle className=\"w-4 h-4 mr-2\" />\n            {error}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setError('')}\n              className=\"ml-2 p-1\"\n            >\n              ×\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.216Z"
  },
  {
    "path": "src/app/dashboard/advanced-analytics/page.tsx",
    "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area } from 'recharts';\nimport { TrendingUp, TrendingDown, Users, DollarSign, MousePointer, Eye, Calendar, Download, Filter, RefreshCw } from 'lucide-react';\n\ninterface AnalyticsData {\n  revenue: { month: string; amount: number; }[];\n  traffic: { date: string; visitors: number; pageViews: number; }[];\n  conversions: { source: string; conversions: number; rate: number; }[];\n  demographics: { age: string; percentage: number; }[];\n  devices: { device: string; users: number; }[];\n  topPages: { page: string; views: number; bounceRate: number; }[];\n}\n\nexport default function AdvancedAnalyticsPage() {\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState('30d');\n  const [selectedMetric, setSelectedMetric] = useState('revenue');\n\n  useEffect(() => {\n    fetchAnalyticsData();\n  }, [timeRange]);\n\n  const fetchAnalyticsData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API call with mock data\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const mockData: AnalyticsData = {\n        revenue: [\n          { month: 'Jan', amount: 12500 },\n          { month: 'Feb', amount: 15800 },\n          { month: 'Mar', amount: 18200 },\n          { month: 'Apr', amount: 22100 },\n          { month: 'May', amount: 25600 },\n          { month: 'Jun', amount: 28900 },\n        ],\n        traffic: [\n          { date: '2024-01-01', visitors: 1250, pageViews: 3200 },\n          { date: '2024-01-02', visitors: 1380, pageViews: 3450 },\n          { date: '2024-01-03', visitors: 1420, pageViews: 3680 },\n          { date: '2024-01-04', visitors: 1580, pageViews: 4100 },\n          { date: '2024-01-05', visitors: 1650, pageViews: 4250 },\n        ],\n        conversions: [\n          { source: 'Organic Search', conversions: 245, rate: 3.2 },\n          { source: 'Social Media', conversions: 189, rate: 2.8 },\n          { source: 'Email Marketing', conversions: 156, rate: 4.1 },\n          { source: 'Paid Ads', conversions: 134, rate: 2.5 },\n          { source: 'Direct Traffic', conversions: 98, rate: 3.8 },\n        ],\n        demographics: [\n          { age: '18-24', percentage: 15 },\n          { age: '25-34', percentage: 35 },\n          { age: '35-44', percentage: 28 },\n          { age: '45-54', percentage: 15 },\n          { age: '55+', percentage: 7 },\n        ],\n        devices: [\n          { device: 'Desktop', users: 4250 },\n          { device: 'Mobile', users: 6800 },\n          { device: 'Tablet', users: 1950 },\n        ],\n        topPages: [\n          { page: '/product/wireless-headphones', views: 8500, bounceRate: 25.4 },\n          { page: '/product/smartphone-case', views: 6200, bounceRate: 32.1 },\n          { page: '/product/laptop-stand', views: 5800, bounceRate: 28.7 },\n          { page: '/product/bluetooth-speaker', views: 4900, bounceRate: 35.2 },\n        ],\n      };\n      \n      setAnalyticsData(mockData);\n    } catch (error) {\n      console.error('Failed to fetch analytics data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"flex items-center space-x-2\">\n          <RefreshCw className=\"h-6 w-6 animate-spin\" />\n          <span>Loading advanced analytics...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Advanced Analytics</h1>\n          <p className=\"text-gray-600 mt-2\">Comprehensive insights into your affiliate marketing performance</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <select \n            value={timeRange} \n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"px-3 py-2 border rounded-md\"\n          >\n            <option value=\"7d\">Last 7 days</option>\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n            <option value=\"1y\">Last year</option>\n          </select>\n          <Button variant=\"outline\" onClick={fetchAnalyticsData}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n          <Button>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">$28,900</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +12.5% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Visitors</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">45,280</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +8.2% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\n            <MousePointer className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">3.24%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +0.4% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Page Views</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">128,450</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +15.3% from last month\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Revenue Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Revenue Trend</CardTitle>\n          <CardDescription>Monthly revenue over the last 6 months</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={analyticsData?.revenue}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip formatter={(value) => [`$${value}`, 'Revenue']} />\n              <Area type=\"monotone\" dataKey=\"amount\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.3} />\n            </AreaChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Traffic Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Traffic Overview</CardTitle>\n            <CardDescription>Daily visitors and page views</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={analyticsData?.traffic}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"visitors\" stroke=\"#8884d8\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"pageViews\" stroke=\"#82ca9d\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Device Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Device Distribution</CardTitle>\n            <CardDescription>User distribution by device type</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <PieChart>\n                <Pie\n                  data={analyticsData?.devices}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ device, percentage }) => `${device}: ${percentage}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"users\"\n                >\n                  {analyticsData?.devices.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Conversion Sources */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Conversion Sources</CardTitle>\n          <CardDescription>Performance by traffic source</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={analyticsData?.conversions}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"source\" />\n              <YAxis />\n              <Tooltip />\n              <Bar dataKey=\"conversions\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Top Performing Pages */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Top Performing Pages</CardTitle>\n          <CardDescription>Pages with highest traffic and engagement</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {analyticsData?.topPages.map((page, index) => (\n              <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium\">{page.page}</h4>\n                  <p className=\"text-sm text-gray-600\">{page.views?.toLocaleString() || \"0\"} views</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium\">{page.bounceRate}% bounce rate</p>\n                  <p className=\"text-xs text-gray-600\">Bounce rate</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.577Z"
  },
  {
    "path": "src/app/dashboard/advanced-reporting/page.tsx",
    "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { FileText, Download, Calendar, Filter, BarChart3, TrendingUp, DollarSign, Users, Eye, MousePointer, Share, Mail, Printer, Settings } from 'lucide-react';\n\ninterface Report {\n  id: string;\n  name: string;\n  type: 'revenue' | 'traffic' | 'conversion' | 'custom';\n  description: string;\n  schedule: 'manual' | 'daily' | 'weekly' | 'monthly';\n  format: 'pdf' | 'excel' | 'csv';\n  recipients: string[];\n  lastGenerated?: Date;\n  nextScheduled?: Date;\n  status: 'active' | 'paused' | 'draft';\n}\n\ninterface ReportTemplate {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  metrics: string[];\n  preview: string;\n}\n\ninterface MetricData {\n  name: string;\n  value: string;\n  change: string;\n  trend: 'up' | 'down' | 'neutral';\n  icon: any;\n}\n\nexport default function AdvancedReportingPage() {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [templates, setTemplates] = useState<ReportTemplate[]>([]);\n  const [metrics, setMetrics] = useState<MetricData[]>([]);\n  const [activeTab, setActiveTab] = useState<'reports' | 'templates' | 'scheduled' | 'analytics'>('reports');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  useEffect(() => {\n    loadReportingData();\n  }, []);\n\n  const loadReportingData = () => {\n    // Mock reports\n    const mockReports: Report[] = [\n      {\n        id: '1',\n        name: 'Monthly Revenue Report',\n        type: 'revenue',\n        description: 'Comprehensive monthly revenue analysis with trends and forecasts',\n        schedule: 'monthly',\n        format: 'pdf',\n        recipients: ['john@affilify.eu', 'sarah@affilify.eu'],\n        lastGenerated: new Date(Date.now() - 86400000 * 2),\n        nextScheduled: new Date(Date.now() + 86400000 * 28),\n        status: 'active',\n      },\n      {\n        id: '2',\n        name: 'Weekly Traffic Summary',\n        type: 'traffic',\n        description: 'Weekly website traffic and user engagement metrics',\n        schedule: 'weekly',\n        format: 'excel',\n        recipients: ['team@affilify.eu'],\n        lastGenerated: new Date(Date.now() - 86400000 * 1),\n        nextScheduled: new Date(Date.now() + 86400000 * 6),\n        status: 'active',\n      },\n      {\n        id: '3',\n        name: 'Conversion Optimization Report',\n        type: 'conversion',\n        description: 'A/B testing results and conversion rate analysis',\n        schedule: 'manual',\n        format: 'pdf',\n        recipients: ['marketing@affilify.eu'],\n        lastGenerated: new Date(Date.now() - 86400000 * 5),\n        status: 'draft',\n      },\n      {\n        id: '4',\n        name: 'Executive Dashboard',\n        type: 'custom',\n        description: 'High-level KPIs and business metrics for executives',\n        schedule: 'daily',\n        format: 'pdf',\n        recipients: ['ceo@affilify.eu', 'cfo@affilify.eu'],\n        lastGenerated: new Date(Date.now() - 3600000),\n        nextScheduled: new Date(Date.now() + 86400000),\n        status: 'active',\n      },\n    ];\n\n    // Mock templates\n    const mockTemplates: ReportTemplate[] = [\n      {\n        id: '1',\n        name: 'Revenue Analysis',\n        category: 'Financial',\n        description: 'Detailed revenue breakdown with trends and forecasts',\n        metrics: ['Total Revenue', 'Revenue by Source', 'Growth Rate', 'Profit Margins'],\n        preview: '/previews/revenue-template.jpg',\n      },\n      {\n        id: '2',\n        name: 'Traffic Overview',\n        category: 'Analytics',\n        description: 'Website traffic analysis and user behavior insights',\n        metrics: ['Page Views', 'Unique Visitors', 'Bounce Rate', 'Session Duration'],\n        preview: '/previews/traffic-template.jpg',\n      },\n      {\n        id: '3',\n        name: 'Conversion Funnel',\n        category: 'Marketing',\n        description: 'Conversion tracking and optimization opportunities',\n        metrics: ['Conversion Rate', 'Funnel Drop-offs', 'A/B Test Results', 'ROI'],\n        preview: '/previews/conversion-template.jpg',\n      },\n      {\n        id: '4',\n        name: 'Executive Summary',\n        category: 'Management',\n        description: 'High-level business metrics and KPIs',\n        metrics: ['Revenue', 'Growth', 'Customer Acquisition', 'Market Share'],\n        preview: '/previews/executive-template.jpg',\n      },\n    ];\n\n    // Mock metrics\n    const mockMetrics: MetricData[] = [\n      {\n        name: 'Total Revenue',\n        value: '$45,280',\n        change: '+12.5%',\n        trend: 'up',\n        icon: DollarSign,\n      },\n      {\n        name: 'Website Visitors',\n        value: '28,450',\n        change: '+8.2%',\n        trend: 'up',\n        icon: Users,\n      },\n      {\n        name: 'Page Views',\n        value: '125,680',\n        change: '+15.3%',\n        trend: 'up',\n        icon: Eye,\n      },\n      {\n        name: 'Conversion Rate',\n        value: '3.24%',\n        change: '+0.4%',\n        trend: 'up',\n        icon: MousePointer,\n      },\n    ];\n\n    setReports(mockReports);\n    setTemplates(mockTemplates);\n    setMetrics(mockMetrics);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'paused': return 'text-orange-600 bg-orange-100';\n      case 'draft': return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'revenue': return 'text-green-600 bg-green-100';\n      case 'traffic': return 'text-blue-600 bg-blue-100';\n      case 'conversion': return 'text-purple-600 bg-purple-100';\n      case 'custom': return 'text-orange-600 bg-orange-100';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  const getFormatIcon = (format: string) => {\n    switch (format) {\n      case 'pdf': return '📄';\n      case 'excel': return '📊';\n      case 'csv': return '📋';\n      default: return '📄';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center\">\n            <FileText className=\"h-8 w-8 mr-3 text-blue-600\" />\n            Advanced Reporting\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Generate comprehensive reports and analytics for your affiliate business</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Data\n          </Button>\n          <Button onClick={() => setShowCreateModal(true)}>\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Create Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {metrics.map((metric, index) => (\n          <Card key={index}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">{metric.name}</CardTitle>\n              <metric.icon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{metric.value}</div>\n              <p className={`text-xs flex items-center ${\n                metric.trend === 'up' ? 'text-green-600' : \n                metric.trend === 'down' ? 'text-red-600' : 'text-gray-600'\n              }`}>\n                <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                {metric.change} from last period\n              </p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b\">\n        <nav className=\"flex space-x-8\">\n          {[\n            { id: 'reports', label: 'My Reports', icon: FileText },\n            { id: 'templates', label: 'Templates', icon: Settings },\n            { id: 'scheduled', label: 'Scheduled', icon: Calendar },\n            { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Reports Tab */}\n      {activeTab === 'reports' && (\n        <div className=\"space-y-4\">\n          {reports.map((report) => (\n            <Card key={report.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <h3 className=\"font-semibold\">{report.name}</h3>\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${getTypeColor(report.type)}`}>\n                        {report.type.charAt(0).toUpperCase() + report.type.slice(1)}\n                      </span>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(report.status)}`}>\n                        {report.status.charAt(0).toUpperCase() + report.status.slice(1)}\n                      </span>\n                    </div>\n                    \n                    <p className=\"text-gray-600 mb-3\">{report.description}</p>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Schedule</p>\n                        <p className=\"font-medium capitalize\">{report.schedule}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Format</p>\n                        <p className=\"font-medium flex items-center\">\n                          <span className=\"mr-1\">{getFormatIcon(report.format)}</span>\n                          {report.format.toUpperCase()}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Recipients</p>\n                        <p className=\"font-medium\">{report.recipients.length} people</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Last Generated</p>\n                        <p className=\"font-medium\">\n                          {report.lastGenerated ? report.lastGenerated.toLocaleDateString() : 'Never'}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {report.nextScheduled && (\n                      <p className=\"text-sm text-blue-600 mt-2\">\n                        Next scheduled: {report.nextScheduled.toLocaleDateString()} at {report.nextScheduled.toLocaleTimeString()}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Share className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                    <Button size=\"sm\">\n                      Generate Now\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Templates Tab */}\n      {activeTab === 'templates' && (\n        <div className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Report Templates</h2>\n            <Button>\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Create Custom Template\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {templates.map((template) => (\n              <Card key={template.id} className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"aspect-video bg-gray-200 rounded-lg mb-4 flex items-center justify-center\">\n                    <FileText className=\"h-12 w-12 text-gray-400\" />\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <h3 className=\"font-semibold\">{template.name}</h3>\n                    <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded\">\n                      {template.category}\n                    </span>\n                  </div>\n                  \n                  <p className=\"text-gray-600 mb-3\">{template.description}</p>\n                  \n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium mb-2\">Included Metrics:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {template.metrics.map((metric, index) => (\n                        <span key={index} className=\"px-2 py-1 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-700 text-xs rounded\">\n                          {metric}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button size=\"sm\" className=\"flex-1\">Use Template</Button>\n                    <Button variant=\"outline\" size=\"sm\">Preview</Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Scheduled Tab */}\n      {activeTab === 'scheduled' && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold\">Scheduled Reports</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Upcoming Reports</CardTitle>\n              <CardDescription>Reports scheduled for automatic generation</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {reports\n                  .filter(r => r.schedule !== 'manual' && r.status === 'active')\n                  .sort((a, b) => (a.nextScheduled?.getTime() || 0) - (b.nextScheduled?.getTime() || 0))\n                  .map((report) => (\n                    <div key={report.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Calendar className=\"h-5 w-5 text-blue-600\" />\n                        <div>\n                          <h4 className=\"font-medium\">{report.name}</h4>\n                          <p className=\"text-sm text-gray-600\">\n                            {report.schedule.charAt(0).toUpperCase() + report.schedule.slice(1)} • {report.format.toUpperCase()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">\n                          {report.nextScheduled?.toLocaleDateString()}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          {report.nextScheduled?.toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Delivery Settings</CardTitle>\n              <CardDescription>Configure how and when reports are delivered</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2 flex items-center\">\n                    <Mail className=\"h-5 w-5 mr-2\" />\n                    Email Delivery\n                  </h3>\n                  <p className=\"text-gray-600 mb-3\">\n                    Automatically send reports to specified email addresses\n                  </p>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Configure Email\n                  </Button>\n                </div>\n                \n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2 flex items-center\">\n                    <Download className=\"h-5 w-5 mr-2\" />\n                    Cloud Storage\n                  </h3>\n                  <p className=\"text-gray-600 mb-3\">\n                    Save reports to your preferred cloud storage service\n                  </p>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Setup Storage\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Analytics Tab */}\n      {activeTab === 'analytics' && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold\">Reporting Analytics</h2>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Report Generation Trends</CardTitle>\n                <CardDescription>Number of reports generated over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                  <BarChart3 className=\"h-12 w-12 mr-4\" />\n                  <span>Generation trends chart would be displayed here</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Most Popular Reports</CardTitle>\n                <CardDescription>Reports generated most frequently</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {reports\n                    .sort((a, b) => (b.lastGenerated?.getTime() || 0) - (a.lastGenerated?.getTime() || 0))\n                    .slice(0, 4)\n                    .map((report, index) => (\n                      <div key={report.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <span className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium\">\n                            {index + 1}\n                          </span>\n                          <div>\n                            <h4 className=\"font-medium\">{report.name}</h4>\n                            <p className=\"text-sm text-gray-600\">{report.type}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">{Math.floor(Math.random() * 50) + 10} times</p>\n                          <p className=\"text-sm text-gray-600\">This month</p>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Report Performance Metrics</CardTitle>\n              <CardDescription>Key statistics about your reporting system</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <FileText className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-2xl font-bold\">47</p>\n                  <p className=\"text-sm text-gray-600\">Reports Generated</p>\n                  <p className=\"text-xs text-green-600\">This month</p>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <Download className=\"h-8 w-8 mx-auto mb-2 text-green-600\" />\n                  <p className=\"text-2xl font-bold\">156</p>\n                  <p className=\"text-sm text-gray-600\">Downloads</p>\n                  <p className=\"text-xs text-green-600\">This month</p>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <Mail className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\n                  <p className=\"text-2xl font-bold\">89</p>\n                  <p className=\"text-sm text-gray-600\">Email Deliveries</p>\n                  <p className=\"text-xs text-green-600\">This month</p>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <TrendingUp className=\"h-8 w-8 mx-auto mb-2 text-orange-600\" />\n                  <p className=\"text-2xl font-bold\">98.5%</p>\n                  <p className=\"text-sm text-gray-600\">Success Rate</p>\n                  <p className=\"text-xs text-green-600\">All time</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.577Z"
  },
  {
    "path": "src/app/dashboard/ai-chatbot/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  MessageCircle, \n  Send, \n  Plus, \n  Trash2, \n  ThumbsUp, \n  ThumbsDown,\n  Copy,\n  Loader2,\n  Bot,\n  User,\n  Sparkles,\n  Zap\n} from 'lucide-react'\n\ninterface Message {\n  id: string\n  type: 'user' | 'bot'\n  content: string\n  timestamp: Date\n  rating?: 'up' | 'down'\n}\n\ninterface ChatSession {\n  id: string\n  title: string\n  createdAt: Date\n  updatedAt: Date\n  messageCount?: number\n  lastMessage?: string\n}\n\nexport default function AIChatbotPage() {\n  const [messages, setMessages] = useState<Message[]>([])\n  const [chatSessions, setChatSessions] = useState<ChatSession[]>([])\n  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null)\n  const [inputMessage, setInputMessage] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [loadingSessions, setLoadingSessions] = useState(true)\n  const [error, setError] = useState('')\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    loadChatSessions()\n  }, [])\n\n  useEffect(() => {\n    if (currentSessionId) {\n      loadMessages(currentSessionId)\n    }\n  }, [currentSessionId])\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  const loadChatSessions = async () => {\n    try {\n      setLoadingSessions(true)\n      const response = await fetch('/api/chatbot/sessions')\n      const data = await response.json()\n\n      if (response.ok) {\n        setChatSessions(data.sessions || [])\n        \n        // If no sessions exist, create a default one\n        if (data.sessions.length === 0) {\n          await createNewSession('Getting Started with AFFILIFY')\n        } else {\n          // Load the most recent session\n          setCurrentSessionId(data.sessions[0].id)\n        }\n      } else {\n        setError('Failed to load chat sessions')\n      }\n    } catch (error) {\n      console.error('Error loading chat sessions:', error)\n      setError('Failed to load chat sessions')\n    } finally {\n      setLoadingSessions(false)\n    }\n  }\n\n  const loadMessages = async (sessionId: string) => {\n    try {\n      const response = await fetch(`/api/chatbot/messages?sessionId=${sessionId}`)\n      const data = await response.json()\n\n      if (response.ok) {\n        setMessages(data.messages || [])\n      } else {\n        setError('Failed to load messages')\n      }\n    } catch (error) {\n      console.error('Error loading messages:', error)\n      setError('Failed to load messages')\n    }\n  }\n\n  const createNewSession = async (title: string = 'New Chat') => {\n    try {\n      const response = await fetch('/api/chatbot/sessions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ title }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        const newSession = data.session\n        setChatSessions(prev => [newSession, ...prev])\n        setCurrentSessionId(newSession.id)\n        setMessages([])\n        \n        // Load the welcome message\n        setTimeout(() => loadMessages(newSession.id), 500)\n      } else {\n        setError('Failed to create new session')\n      }\n    } catch (error) {\n      console.error('Error creating session:', error)\n      setError('Failed to create new session')\n    }\n  }\n\n  const deleteSession = async (sessionId: string) => {\n    if (!confirm('Are you sure you want to delete this chat session?')) return\n\n    try {\n      const response = await fetch(`/api/chatbot/sessions?sessionId=${sessionId}`, {\n        method: 'DELETE',\n      })\n\n      if (response.ok) {\n        setChatSessions(prev => prev.filter(s => s.id !== sessionId))\n        \n        if (currentSessionId === sessionId) {\n          const remainingSessions = chatSessions.filter(s => s.id !== sessionId)\n          if (remainingSessions.length > 0) {\n            setCurrentSessionId(remainingSessions[0].id)\n          } else {\n            await createNewSession('New Chat')\n          }\n        }\n      } else {\n        setError('Failed to delete session')\n      }\n    } catch (error) {\n      console.error('Error deleting session:', error)\n      setError('Failed to delete session')\n    }\n  }\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim() || isLoading || !currentSessionId) return\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date(),\n    }\n\n    setMessages(prev => [...prev, userMessage])\n    setInputMessage('')\n    setIsLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch('/api/chatbot/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: inputMessage,\n          sessionId: currentSessionId,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setMessages(prev => [...prev, data.message])\n        \n        // Update session list to reflect new activity\n        loadChatSessions()\n      } else {\n        setError(data.message || 'Failed to get AI response')\n        \n        // Add error message to chat\n        const errorMessage: Message = {\n          id: (Date.now() + 1).toString(),\n          type: 'bot',\n          content: 'I apologize, but I\\'m experiencing some technical difficulties. Please try again in a moment.',\n          timestamp: new Date(),\n        }\n        setMessages(prev => [...prev, errorMessage])\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error)\n      setError('Failed to send message')\n      \n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'bot',\n        content: 'I apologize, but I\\'m experiencing some technical difficulties. Please try again in a moment.',\n        timestamp: new Date(),\n      }\n      setMessages(prev => [...prev, errorMessage])\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const rateMessage = async (messageId: string, rating: 'up' | 'down') => {\n    try {\n      const response = await fetch('/api/chatbot/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ messageId, rating }),\n      })\n\n      if (response.ok) {\n        setMessages(prev => prev.map(msg => \n          msg.id === messageId ? { ...msg, rating } : msg\n        ))\n      }\n    } catch (error) {\n      console.error('Error rating message:', error)\n    }\n  }\n\n  const copyMessage = (content: string) => {\n    navigator.clipboard.writeText(content)\n    // Could add a toast notification here\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      sendMessage()\n    }\n  }\n\n  if (loadingSessions) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center gap-3\">\n          <Bot className=\"w-8 h-8 text-blue-600\" />\n          AFFILIFY AI Assistant\n        </h1>\n        <p className=\"text-gray-600\">Get expert affiliate marketing advice powered by advanced AI</p>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100vh-200px)]\">\n        {/* Chat Sessions Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"h-full\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">Chat Sessions</CardTitle>\n                <Button\n                  onClick={() => createNewSession()}\n                  size=\"sm\"\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-2 max-h-[calc(100vh-300px)] overflow-y-auto p-4\">\n                {chatSessions.map((session) => (\n                  <div\n                    key={session.id}\n                    className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                      currentSessionId === session.id\n                        ? 'bg-blue-50 border-blue-200'\n                        : 'hover:bg-gray-50'\n                    }`}\n                    onClick={() => setCurrentSessionId(session.id)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-sm truncate\">{session.title}</h4>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {new Date(session.createdAt).toLocaleDateString()}\n                        </p>\n                        {session.lastMessage && (\n                          <p className=\"text-xs text-gray-400 mt-1 truncate\">\n                            {session.lastMessage}\n                          </p>\n                        )}\n                      </div>\n                      <Button\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          deleteSession(session.id)\n                        }}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Chat Interface */}\n        <div className=\"lg:col-span-3\">\n          <Card className=\"h-full flex flex-col\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Sparkles className=\"w-5 h-5 text-purple-600\" />\n                AI Chat Assistant\n              </CardTitle>\n              <CardDescription>\n                Ask me anything about affiliate marketing, website optimization, or business strategy\n              </CardDescription>\n            </CardHeader>\n            \n            {/* Messages */}\n            <CardContent className=\"flex-1 flex flex-col p-0\">\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-4 max-h-[calc(100vh-400px)]\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex gap-3 ${\n                      message.type === 'user' ? 'justify-end' : 'justify-start'\n                    }`}\n                  >\n                    {message.type === 'bot' && (\n                      <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Bot className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                    \n                    <div\n                      className={`max-w-[80%] rounded-lg p-4 ${\n                        message.type === 'user'\n                          ? 'bg-blue-600 text-white'\n                          : 'bg-gray-100 text-gray-900'\n                      }`}\n                    >\n                      <div className=\"whitespace-pre-wrap\">{message.content}</div>\n                      \n                      {message.type === 'bot' && (\n                        <div className=\"flex items-center justify-between mt-3 pt-2 border-t border-gray-200\">\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              onClick={() => rateMessage(message.id, 'up')}\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className={`h-6 w-6 p-0 ${\n                                message.rating === 'up' ? 'text-green-600' : 'text-gray-400'\n                              }`}\n                            >\n                              <ThumbsUp className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              onClick={() => rateMessage(message.id, 'down')}\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className={`h-6 w-6 p-0 ${\n                                message.rating === 'down' ? 'text-red-600' : 'text-gray-400'\n                              }`}\n                            >\n                              <ThumbsDown className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                          <Button\n                            onClick={() => copyMessage(message.content)}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-6 w-6 p-0 text-gray-400 hover:text-gray-600\"\n                          >\n                            <Copy className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {message.type === 'user' && (\n                      <div className=\"w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <User className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                ))}\n                \n                {isLoading && (\n                  <div className=\"flex gap-3 justify-start\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                      <Bot className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"bg-gray-100 rounded-lg p-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        <span className=\"text-gray-600\">AFFILIFY AI is thinking...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                <div ref={messagesEndRef} />\n              </div>\n\n              {/* Input */}\n              <div className=\"border-t p-4\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Ask me about affiliate marketing, SEO, conversions, or anything else...\"\n                    disabled={isLoading || !currentSessionId}\n                    className=\"flex-1\"\n                  />\n                  <Button\n                    onClick={sendMessage}\n                    disabled={isLoading || !inputMessage.trim() || !currentSessionId}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    {isLoading ? (\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    ) : (\n                      <Send className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                </div>\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  Press Enter to send, Shift+Enter for new line\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.577Z"
  },
  {
    "path": "src/app/dashboard/analyze-website/page.tsx",
    "content": "'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  BarChart3, \n  Globe, \n  Search, \n  TrendingUp, \n  AlertCircle, \n  CheckCircle,\n  Loader2,\n  Eye,\n  MousePointer,\n  Clock,\n  Star,\n  Zap\n} from 'lucide-react'\n\ninterface AnalysisResult {\n  url: string\n  score: number\n  metrics: {\n    performance: number\n    seo: number\n    accessibility: number\n    bestPractices: number\n  }\n  insights: {\n    category: string\n    title: string\n    description: string\n    impact: 'high' | 'medium' | 'low'\n    type: 'opportunity' | 'issue' | 'success'\n  }[]\n  recommendations: {\n    title: string\n    description: string\n    priority: 'high' | 'medium' | 'low'\n    effort: 'easy' | 'medium' | 'hard'\n  }[]\n  competitors?: {\n    url: string\n    score: number\n    traffic: number\n  }[]\n}\n\nexport default function AnalyzeWebsitePage() {\n  const [url, setUrl] = useState('')\n  const [includeCompetitors, setIncludeCompetitors] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [result, setResult] = useState<AnalysisResult | null>(null)\n  const [error, setError] = useState('')\n\n  const handleAnalyze = async () => {\n    if (!url) {\n      setError('Please enter a website URL')\n      return\n    }\n\n    // Basic URL validation\n    try {\n      new URL(url)\n    } catch {\n      setError('Please enter a valid URL')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n    setResult(null)\n\n    try {\n      const response = await fetch('/api/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          url,\n          analysisType: 'comprehensive',\n          includeCompetitors\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setResult(data.analysis)\n      } else {\n        setError(data.error || 'Analysis failed')\n      }\n    } catch (error) {\n      console.error('Analysis error:', error)\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-600'\n    if (score >= 60) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  const getScoreBg = (score: number) => {\n    if (score >= 80) return 'bg-green-100'\n    if (score >= 60) return 'bg-yellow-100'\n    return 'bg-red-100'\n  }\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high':\n        return 'bg-red-100 text-red-800'\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'low':\n        return 'bg-green-100 text-green-800'\n      default:\n        return 'bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-800'\n    }\n  }\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800'\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'low':\n        return 'bg-blue-100 text-blue-800'\n      default:\n        return 'bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-800'\n    }\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Analyze Website</h1>\n        <p className=\"text-gray-600\">Get detailed insights and optimization recommendations for any website</p>\n      </div>\n\n      {/* Analysis Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"w-5 h-5\" />\n            Website Analysis\n          </CardTitle>\n          <CardDescription>\n            Enter a website URL to get comprehensive performance and SEO analysis\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Website URL *\n            </label>\n            <Input\n              type=\"url\"\n              placeholder=\"https://example.com\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"competitors\"\n              checked={includeCompetitors}\n              onChange={(e) => setIncludeCompetitors(e.target.checked)}\n              className=\"rounded border-gray-300\"\n            />\n            <label htmlFor=\"competitors\" className=\"text-sm text-gray-700\">\n              Include competitor analysis\n            </label>\n          </div>\n\n          {error && (\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-md flex items-center\">\n              <AlertCircle className=\"w-5 h-5 text-red-600 mr-2\" />\n              <span className=\"text-red-700\">{error}</span>\n            </div>\n          )}\n\n          <Button \n            onClick={handleAnalyze} \n            disabled={loading}\n            className=\"w-full\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"mr-2 w-4 h-4 animate-spin\" />\n                Analyzing...\n              </>\n            ) : (\n              <>\n                <BarChart3 className=\"mr-2 w-4 h-4\" />\n                Analyze Website\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Analysis Results */}\n      {result && (\n        <div className=\"space-y-6\">\n          {/* Overall Score */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Overall Performance Score</span>\n                <div className={`text-3xl font-bold ${getScoreColor(result.score)}`}>\n                  {result.score}/100\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className={`w-16 h-16 rounded-full ${getScoreBg(result.metrics.performance)} flex items-center justify-center mx-auto mb-2`}>\n                    <span className={`text-lg font-bold ${getScoreColor(result.metrics?.performance || 0)}`}>\n                      {result.metrics?.performance || 0}\n                    </span>\n                  </div>\n                  <p className=\"text-sm font-medium\">Performance</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className={`w-16 h-16 rounded-full ${getScoreBg(result.metrics.seo)} flex items-center justify-center mx-auto mb-2`}>\n                    <span className={`text-lg font-bold ${getScoreColor(result.metrics?.seo || 0)}`}>\n                      {result.metrics?.seo || 0}\n                    </span>\n                  </div>\n                  <p className=\"text-sm font-medium\">SEO</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className={`w-16 h-16 rounded-full ${getScoreBg(result.metrics.accessibility)} flex items-center justify-center mx-auto mb-2`}>\n                    <span className={`text-lg font-bold ${getScoreColor(result.metrics?.accessibility || 0)}`}>\n                      {result.metrics?.accessibility || 0}\n                    </span>\n                  </div>\n                  <p className=\"text-sm font-medium\">Accessibility</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className={`w-16 h-16 rounded-full ${getScoreBg(result.metrics.bestPractices)} flex items-center justify-center mx-auto mb-2`}>\n                    <span className={`text-lg font-bold ${getScoreColor(result.metrics?.bestPractices || 0)}`}>\n                      {result.metrics?.bestPractices || 0}\n                    </span>\n                  </div>\n                  <p className=\"text-sm font-medium\">Best Practices</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Key Insights */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Key Insights</CardTitle>\n              <CardDescription>Important findings from the analysis</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {result.insights.map((insight, index) => (\n                  <div key={index} className=\"flex items-start space-x-3 p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 rounded-lg\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {insight.type === 'success' && <CheckCircle className=\"w-5 h-5 text-green-600\" />}\n                      {insight.type === 'opportunity' && <TrendingUp className=\"w-5 h-5 text-blue-600\" />}\n                      {insight.type === 'issue' && <AlertCircle className=\"w-5 h-5 text-red-600\" />}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h4 className=\"font-medium\">{insight.title}</h4>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getImpactColor(insight.impact)}`}>\n                          {insight.impact} impact\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-600\">{insight.description}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">{insight.category}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recommendations */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Optimization Recommendations</CardTitle>\n              <CardDescription>Actionable steps to improve your website</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {result.recommendations.map((rec, index) => (\n                  <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{rec.title}</h4>\n                      <div className=\"flex space-x-2\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(rec.priority)}`}>\n                          {rec.priority} priority\n                        </span>\n                        <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-800\">\n                          {rec.effort} effort\n                        </span>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">{rec.description}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Competitor Analysis */}\n          {result.competitors && result.competitors.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Competitor Analysis</CardTitle>\n                <CardDescription>How you compare to similar websites</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {result.competitors.map((competitor, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">{competitor.url}</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {competitor.traffic?.toLocaleString() || \"0\"} monthly visitors\n                        </p>\n                      </div>\n                      <div className={`text-lg font-bold ${getScoreColor(competitor.score)}`}>\n                        {competitor.score}/100\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* No results state */}\n      {!result && !loading && (\n        <div className=\"text-center py-12\">\n          <BarChart3 className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No analysis yet</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Enter a website URL above to get started with comprehensive analysis.\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.577Z"
  },
  {
    "path": "src/app/dashboard/api-management/page.tsx",
    "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Key, Plus, Copy, Eye, EyeOff, Trash2, Settings, BarChart3, Shield, Clock, CheckCircle, AlertTriangle, RefreshCw } from 'lucide-react';\n\ninterface ApiKey {\n  id: string;\n  name: string;\n  key: string;\n  permissions: string[];\n  status: 'active' | 'inactive' | 'expired';\n  createdDate: Date;\n  lastUsed?: Date;\n  expiryDate?: Date;\n  requestCount: number;\n  rateLimit: number;\n}\n\ninterface ApiEndpoint {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  path: string;\n  description: string;\n  requiredPermissions: string[];\n  rateLimit: string;\n  status: 'active' | 'deprecated';\n}\n\ninterface ApiUsage {\n  date: string;\n  requests: number;\n  errors: number;\n  avgResponseTime: number;\n}\n\nexport default function ApiManagementPage() {\n  const [apiKeys, setApiKeys] = useState<ApiKey[]>([]);\n  const [endpoints, setEndpoints] = useState<ApiEndpoint[]>([]);\n  const [usage, setUsage] = useState<ApiUsage[]>([]);\n  const [activeTab, setActiveTab] = useState<'keys' | 'endpoints' | 'usage' | 'docs'>('keys');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [visibleKeys, setVisibleKeys] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    loadApiData();\n  }, []);\n\n  const loadApiData = () => {\n    // Mock API keys\n    const mockKeys: ApiKey[] = [\n      {\n        id: '1',\n        name: 'Production API Key',\n        key: 'aff_live_sk_1234567890abcdef',\n        permissions: ['websites:read', 'websites:write', 'analytics:read'],\n        status: 'active',\n        createdDate: new Date(Date.now() - 86400000 * 30),\n        lastUsed: new Date(Date.now() - 3600000),\n        requestCount: 15420,\n        rateLimit: 1000,\n      },\n      {\n        id: '2',\n        name: 'Development API Key',\n        key: 'aff_test_sk_abcdef1234567890',\n        permissions: ['websites:read', 'analytics:read'],\n        status: 'active',\n        createdDate: new Date(Date.now() - 86400000 * 15),\n        lastUsed: new Date(Date.now() - 7200000),\n        requestCount: 3250,\n        rateLimit: 500,\n      },\n      {\n        id: '3',\n        name: 'Legacy Integration',\n        key: 'aff_live_sk_legacy123456789',\n        permissions: ['websites:read'],\n        status: 'inactive',\n        createdDate: new Date(Date.now() - 86400000 * 90),\n        lastUsed: new Date(Date.now() - 86400000 * 7),\n        expiryDate: new Date(Date.now() + 86400000 * 30),\n        requestCount: 8750,\n        rateLimit: 100,\n      },\n    ];\n\n    // Mock API endpoints\n    const mockEndpoints: ApiEndpoint[] = [\n      {\n        method: 'GET',\n        path: '/api/websites',\n        description: 'Retrieve all websites',\n        requiredPermissions: ['websites:read'],\n        rateLimit: '100/hour',\n        status: 'active',\n      },\n      {\n        method: 'POST',\n        path: '/api/websites',\n        description: 'Create a new website',\n        requiredPermissions: ['websites:write'],\n        rateLimit: '50/hour',\n        status: 'active',\n      },\n      {\n        method: 'GET',\n        path: '/api/websites/{id}',\n        description: 'Retrieve a specific website',\n        requiredPermissions: ['websites:read'],\n        rateLimit: '200/hour',\n        status: 'active',\n      },\n      {\n        method: 'PUT',\n        path: '/api/websites/{id}',\n        description: 'Update a website',\n        requiredPermissions: ['websites:write'],\n        rateLimit: '50/hour',\n        status: 'active',\n      },\n      {\n        method: 'DELETE',\n        path: '/api/websites/{id}',\n        description: 'Delete a website',\n        requiredPermissions: ['websites:delete'],\n        rateLimit: '10/hour',\n        status: 'active',\n      },\n      {\n        method: 'GET',\n        path: '/api/analytics',\n        description: 'Retrieve analytics data',\n        requiredPermissions: ['analytics:read'],\n        rateLimit: '100/hour',\n        status: 'active',\n      },\n      {\n        method: 'POST',\n        path: '/api/generate',\n        description: 'Generate website content using AI',\n        requiredPermissions: ['ai:generate'],\n        rateLimit: '20/hour',\n        status: 'active',\n      },\n    ];\n\n    // Mock usage data\n    const mockUsage: ApiUsage[] = [\n      { date: '2024-01-01', requests: 1250, errors: 12, avgResponseTime: 245 },\n      { date: '2024-01-02', requests: 1380, errors: 8, avgResponseTime: 230 },\n      { date: '2024-01-03', requests: 1420, errors: 15, avgResponseTime: 280 },\n      { date: '2024-01-04', requests: 1580, errors: 6, avgResponseTime: 210 },\n      { date: '2024-01-05', requests: 1650, errors: 9, avgResponseTime: 225 },\n    ];\n\n    setApiKeys(mockKeys);\n    setEndpoints(mockEndpoints);\n    setUsage(mockUsage);\n  };\n\n  const toggleKeyVisibility = (keyId: string) => {\n    const newVisible = new Set(visibleKeys);\n    if (newVisible.has(keyId)) {\n      newVisible.delete(keyId);\n    } else {\n      newVisible.add(keyId);\n    }\n    setVisibleKeys(newVisible);\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    // You could add a toast notification here\n  };\n\n  const maskApiKey = (key: string) => {\n    return key.substring(0, 12) + '••••••••••••••••' + key.substring(key.length - 4);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'inactive': return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n      case 'expired': return 'text-red-600 bg-red-100';\n      case 'deprecated': return 'text-orange-600 bg-orange-100';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  const getMethodColor = (method: string) => {\n    switch (method) {\n      case 'GET': return 'text-blue-600 bg-blue-100';\n      case 'POST': return 'text-green-600 bg-green-100';\n      case 'PUT': return 'text-orange-600 bg-orange-100';\n      case 'DELETE': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center\">\n            <Key className=\"h-8 w-8 mr-3 text-blue-600\" />\n            API Management\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Manage API keys, monitor usage, and access documentation</p>\n        </div>\n        <Button onClick={() => setShowCreateModal(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create API Key\n        </Button>\n      </div>\n\n      {/* API Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Keys</CardTitle>\n            <Key className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{apiKeys.filter(k => k.status === 'active').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {apiKeys.length} total keys\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Requests Today</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">1,650</div>\n            <p className=\"text-xs text-muted-foreground\">+12% from yesterday</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">99.4%</div>\n            <p className=\"text-xs text-muted-foreground\">9 errors today</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Response</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">225ms</div>\n            <p className=\"text-xs text-muted-foreground\">-15ms from yesterday</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b\">\n        <nav className=\"flex space-x-8\">\n          {[\n            { id: 'keys', label: 'API Keys', icon: Key },\n            { id: 'endpoints', label: 'Endpoints', icon: Settings },\n            { id: 'usage', label: 'Usage', icon: BarChart3 },\n            { id: 'docs', label: 'Documentation', icon: Shield },\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* API Keys Tab */}\n      {activeTab === 'keys' && (\n        <div className=\"space-y-4\">\n          {apiKeys.map((apiKey) => (\n            <Card key={apiKey.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <h3 className=\"font-semibold\">{apiKey.name}</h3>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(apiKey.status)}`}>\n                        {apiKey.status.charAt(0).toUpperCase() + apiKey.status.slice(1)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <code className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 px-3 py-1 rounded text-sm font-mono\">\n                        {visibleKeys.has(apiKey.id) ? apiKey.key : maskApiKey(apiKey.key)}\n                      </code>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => toggleKeyVisibility(apiKey.id)}\n                      >\n                        {visibleKeys.has(apiKey.id) ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(apiKey.key)}\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Requests</p>\n                        <p className=\"font-medium\">{apiKey.requestCount?.toLocaleString() || \"0\"}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Rate Limit</p>\n                        <p className=\"font-medium\">{apiKey.rateLimit}/hour</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Created</p>\n                        <p className=\"font-medium\">{apiKey.createdDate.toLocaleDateString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Last Used</p>\n                        <p className=\"font-medium\">\n                          {apiKey.lastUsed ? apiKey.lastUsed.toLocaleDateString() : 'Never'}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-3\">\n                      <p className=\"text-sm text-gray-600\">\n                        <strong>Permissions:</strong> {apiKey.permissions.join(', ')}\n                      </p>\n                      {apiKey.expiryDate && (\n                        <p className=\"text-sm text-orange-600 mt-1\">\n                          <AlertTriangle className=\"inline h-3 w-3 mr-1\" />\n                          Expires: {apiKey.expiryDate.toLocaleDateString()}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <RefreshCw className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Endpoints Tab */}\n      {activeTab === 'endpoints' && (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">API Endpoints</h2>\n            <div className=\"text-sm text-gray-600\">\n              Base URL: <code className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 px-2 py-1 rounded\">https://api.affilify.eu/v1</code>\n            </div>\n          </div>\n          \n          {endpoints.map((endpoint, index) => (\n            <Card key={index}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${getMethodColor(endpoint.method)}`}>\n                        {endpoint.method}\n                      </span>\n                      <code className=\"text-sm font-mono\">{endpoint.path}</code>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(endpoint.status)}`}>\n                        {endpoint.status}\n                      </span>\n                    </div>\n                    \n                    <p className=\"text-gray-600 mb-3\">{endpoint.description}</p>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Required Permissions</p>\n                        <p className=\"font-medium\">{endpoint.requiredPermissions.join(', ')}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Rate Limit</p>\n                        <p className=\"font-medium\">{endpoint.rateLimit}</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      Try It\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Docs\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Usage Tab */}\n      {activeTab === 'usage' && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold\">API Usage Analytics</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Request Volume</CardTitle>\n              <CardDescription>Daily API requests over the last 5 days</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                <BarChart3 className=\"h-12 w-12 mr-4\" />\n                <span>Usage chart would be displayed here</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Error Rate</CardTitle>\n                <CardDescription>API errors over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 flex items-center justify-center text-gray-500\">\n                  <AlertTriangle className=\"h-8 w-8 mr-2\" />\n                  <span>Error chart would be displayed here</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Response Time</CardTitle>\n                <CardDescription>Average response time trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 flex items-center justify-center text-gray-500\">\n                  <Clock className=\"h-8 w-8 mr-2\" />\n                  <span>Response time chart would be displayed here</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Usage by Endpoint</CardTitle>\n              <CardDescription>Most popular API endpoints</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {endpoints.slice(0, 5).map((endpoint, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${getMethodColor(endpoint.method)}`}>\n                        {endpoint.method}\n                      </span>\n                      <code className=\"text-sm\">{endpoint.path}</code>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">{Math.floor(Math.random() * 1000) + 100} requests</p>\n                      <p className=\"text-sm text-gray-600\">Today</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Documentation Tab */}\n      {activeTab === 'docs' && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold\">API Documentation</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Getting Started</CardTitle>\n              <CardDescription>Learn how to integrate with the AFFILIFY API</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold mb-2\">Authentication</h3>\n                <p className=\"text-gray-600 mb-2\">\n                  All API requests must include your API key in the Authorization header:\n                </p>\n                <code className=\"block bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 p-3 rounded text-sm\">\n                  Authorization: Bearer your_api_key_here\n                </code>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold mb-2\">Base URL</h3>\n                <code className=\"block bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 p-3 rounded text-sm\">\n                  https://api.affilify.eu/v1\n                </code>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold mb-2\">Response Format</h3>\n                <p className=\"text-gray-600 mb-2\">\n                  All responses are returned in JSON format:\n                </p>\n                <code className=\"block bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 p-3 rounded text-sm whitespace-pre\">\n{`{\n  \"success\": true,\n  \"data\": { ... },\n  \"message\": \"Request successful\"\n}`}\n                </code>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Code Examples</CardTitle>\n              <CardDescription>Sample code for common operations</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold mb-2\">Create a Website (JavaScript)</h3>\n                <code className=\"block bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 p-3 rounded text-sm whitespace-pre\">\n{`const response = await fetch('https://api.affilify.eu/v1/websites', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer your_api_key',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'My Affiliate Site',\n    niche: 'technology',\n    template: 'modern'\n  })\n});\n\nconst data = await response.json();`}\n                </code>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold mb-2\">Get Analytics (Python)</h3>\n                <code className=\"block bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 p-3 rounded text-sm whitespace-pre\">\n{`import requests\n\nheaders = {\n    'Authorization': 'Bearer your_api_key'\n}\n\nresponse = requests.get(\n    'https://api.affilify.eu/v1/analytics',\n    headers=headers\n)\n\ndata = response.json()`}\n                </code>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.578Z"
  },
  {
    "path": "src/app/dashboard/basic/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Globe, \n  BarChart3, \n  Crown,\n  Plus,\n  Settings,\n  TrendingUp,\n  Users,\n  Eye,\n  MousePointer\n} from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function BasicDashboard() {\n  const [stats, setStats] = useState({\n    websites: 1,\n    maxWebsites: 3,\n    totalViews: 1247,\n    totalClicks: 89,\n    conversionRate: 7.1\n  })\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Basic Dashboard</h1>\n            <p className=\"text-gray-700\">Manage your affiliate marketing websites</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"secondary\" className=\"bg-gray-700 text-gray-900\">\n              Basic Plan\n            </Badge>\n            <Button asChild className=\"bg-purple-600 hover:bg-purple-700\">\n              <Link href=\"/pricing\">\n                <Crown className=\"w-4 h-4 mr-2\" />\n                Upgrade to Pro\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Websites</CardTitle>\n              <Globe className=\"h-4 w-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.websites}/{stats.maxWebsites}</div>\n              <p className=\"text-xs text-gray-400\">\n                {stats.maxWebsites - stats.websites} remaining\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Total Views</CardTitle>\n              <Eye className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalViews?.toLocaleString() || \"0\"}</div>\n              <p className=\"text-xs text-gray-400\">\n                +12% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Total Clicks</CardTitle>\n              <MousePointer className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalClicks}</div>\n              <p className=\"text-xs text-gray-400\">\n                +8% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Conversion Rate</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-orange-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.conversionRate}%</div>\n              <p className=\"text-xs text-gray-400\">\n                +2.1% from last month\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Quick Actions</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Get started with your affiliate marketing\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button asChild className=\"w-full bg-purple-600 hover:bg-purple-700\">\n                <Link href=\"/dashboard/create-website/basic\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create New Website\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/my-websites\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  Manage Websites\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/analyze-website\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Basic Analytics\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Upgrade Benefits</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Unlock more features with Pro plan\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center text-gray-700\">\n                <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                <span>10 websites (vs 3 current)</span>\n              </div>\n              <div className=\"flex items-center text-gray-700\">\n                <BarChart3 className=\"w-4 h-4 mr-2 text-blue-400\" />\n                <span>Advanced analytics</span>\n              </div>\n              <div className=\"flex items-center text-gray-700\">\n                <Globe className=\"w-4 h-4 mr-2 text-green-400\" />\n                <span>Custom domains</span>\n              </div>\n              <div className=\"flex items-center text-gray-700\">\n                <Settings className=\"w-4 h-4 mr-2 text-purple-400\" />\n                <span>Priority support</span>\n              </div>\n              <Button asChild className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 mt-4\">\n                <Link href=\"/pricing\">\n                  Upgrade to Pro - $29/month\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-900\">Recent Activity</CardTitle>\n            <CardDescription className=\"text-gray-700\">\n              Your latest affiliate marketing activities\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Globe className=\"w-5 h-5 text-purple-400\" />\n                  <div>\n                    <p className=\"text-gray-900 font-medium\">Basketball Hoop Website</p>\n                    <p className=\"text-gray-400 text-sm\">Created 2 days ago</p>\n                  </div>\n                </div>\n                <Badge variant=\"secondary\" className=\"bg-green-600 text-gray-900\">Active</Badge>\n              </div>\n              \n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-400\">Create more websites to see additional activity</p>\n                <Button asChild className=\"mt-4 bg-purple-600 hover:bg-purple-700\">\n                  <Link href=\"/dashboard/create-website/basic\">\n                    Create Website\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.578Z"
  },
  {
    "path": "src/app/dashboard/billing/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  CreditCard, \n  Calendar, \n  DollarSign, \n  Download, \n  AlertCircle,\n  CheckCircle,\n  Loader2,\n  Crown,\n  Zap,\n  Star,\n  ArrowUpRight,\n  RefreshCw,\n  X\n} from 'lucide-react'\n\ninterface User {\n  id: string\n  name: string\n  email: string\n  plan: 'basic' | 'pro' | 'enterprise'\n  stripeCustomerId?: string\n  subscriptionId?: string\n  subscriptionStatus?: string\n}\n\ninterface Invoice {\n  id: string\n  amount: number\n  currency: string\n  status: string\n  created: number\n  invoice_pdf?: string\n  description?: string\n}\n\ninterface PaymentMethod {\n  id: string\n  type: string\n  card?: {\n    brand: string\n    last4: string\n    exp_month: number\n    exp_year: number\n  }\n}\n\nexport default function BillingPage() {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [invoices, setInvoices] = useState<Invoice[]>([])\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([])\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [upgradeLoading, setUpgradeLoading] = useState(false)\n  const [cancelLoading, setCancelLoading] = useState(false)\n\n  useEffect(() => {\n    loadBillingData()\n  }, [])\n\n  const loadBillingData = async () => {\n    try {\n      // Load user data\n      const userResponse = await fetch('/api/auth/me')\n      if (userResponse.ok) {\n        const userData = await userResponse.json()\n        setUser(userData.user)\n      }\n\n      // Load billing data\n      const billingResponse = await fetch('/api/billing/data')\n      if (billingResponse.ok) {\n        const billingData = await billingResponse.json()\n        setInvoices(billingData.invoices || [])\n        setPaymentMethods(billingData.paymentMethods || [])\n      }\n    } catch (error) {\n      console.error('Error loading billing data:', error)\n      setError('Failed to load billing information')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleUpgrade = async (plan: 'pro' | 'enterprise') => {\n    setUpgradeLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch('/api/stripe/create-checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ plan }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        window.location.href = data.checkoutUrl\n      } else {\n        setError(data.message || 'Failed to create checkout session')\n      }\n    } catch (error) {\n      console.error('Upgrade error:', error)\n      setError('An error occurred while processing your upgrade')\n    } finally {\n      setUpgradeLoading(false)\n    }\n  }\n\n  const handleCancelSubscription = async () => {\n    if (!confirm('Are you sure you want to cancel your subscription? You will lose access to premium features at the end of your billing period.')) {\n      return\n    }\n\n    setCancelLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch('/api/billing/cancel-subscription', {\n        method: 'POST',\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setSuccess('Subscription cancelled successfully. You will retain access until the end of your billing period.')\n        await loadBillingData()\n      } else {\n        setError(data.message || 'Failed to cancel subscription')\n      }\n    } catch (error) {\n      console.error('Cancel subscription error:', error)\n      setError('An error occurred while cancelling your subscription')\n    } finally {\n      setCancelLoading(false)\n    }\n  }\n\n  const getPlanDetails = (plan: string) => {\n    switch (plan) {\n      case 'basic':\n        return {\n          name: 'Basic',\n          price: 'FREE',\n          color: 'text-gray-600 bg-gray-100',\n          icon: <Star className=\"w-4 h-4\" />\n        }\n      case 'pro':\n        return {\n          name: 'Pro',\n          price: '$29/month',\n          color: 'text-purple-600 bg-purple-100',\n          icon: <Crown className=\"w-4 h-4\" />\n        }\n      case 'enterprise':\n        return {\n          name: 'Enterprise',\n          price: '$99/month',\n          color: 'text-blue-600 bg-blue-100',\n          icon: <Zap className=\"w-4 h-4\" />\n        }\n      default:\n        return {\n          name: plan,\n          price: 'Unknown',\n          color: 'text-gray-600 bg-gray-100',\n          icon: <Star className=\"w-4 h-4\" />\n        }\n    }\n  }\n\n  const formatDate = (timestamp: number) => {\n    return new Date(timestamp * 1000).toLocaleDateString()\n  }\n\n  const formatAmount = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency.toUpperCase(),\n    }).format(amount / 100)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  const planDetails = getPlanDetails(user?.plan || 'basic')\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Billing & Subscription</h1>\n        <p className=\"text-gray-600\">Manage your subscription, payment methods, and billing history</p>\n      </div>\n\n      {/* Error/Success Messages */}\n      {error && (\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg flex items-center\">\n          <AlertCircle className=\"w-5 h-5 text-red-600 mr-3\" />\n          <span className=\"text-red-700\">{error}</span>\n        </div>\n      )}\n\n      {success && (\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg flex items-center\">\n          <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n          <span className=\"text-green-700\">{success}</span>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Current Plan */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                {planDetails.icon}\n                Current Plan\n              </CardTitle>\n              <CardDescription>\n                Your current subscription details and usage\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${planDetails.color}`}>\n                      {planDetails.name}\n                    </span>\n                    <span className=\"text-2xl font-bold text-gray-900\">{planDetails.price}</span>\n                  </div>\n                  {user?.subscriptionStatus && (\n                    <p className=\"text-sm text-gray-600\">\n                      Status: <span className=\"capitalize\">{user.subscriptionStatus}</span>\n                    </p>\n                  )}\n                </div>\n                \n                {user?.plan === 'basic' ? (\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => handleUpgrade('pro')}\n                      disabled={upgradeLoading}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                    >\n                      {upgradeLoading ? (\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      ) : (\n                        <Crown className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Upgrade to Pro\n                    </Button>\n                    <Button\n                      onClick={() => handleUpgrade('enterprise')}\n                      disabled={upgradeLoading}\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {upgradeLoading ? (\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      ) : (\n                        <Zap className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Upgrade to Enterprise\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => window.location.href = '/pricing'}\n                      variant=\"outline\"\n                    >\n                      <ArrowUpRight className=\"w-4 h-4 mr-2\" />\n                      Change Plan\n                    </Button>\n                    {user?.subscriptionStatus === 'active' && (\n                      <Button\n                        onClick={handleCancelSubscription}\n                        disabled={cancelLoading}\n                        variant=\"outline\"\n                        className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                      >\n                        {cancelLoading ? (\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        ) : (\n                          <X className=\"w-4 h-4 mr-2\" />\n                        )}\n                        Cancel Subscription\n                      </Button>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Plan Features */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {user?.plan === 'basic' ? '3' : user?.plan === 'pro' ? '10' : '∞'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Websites</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {user?.plan === 'basic' ? '10' : user?.plan === 'pro' ? '50' : '∞'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Analyses</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {user?.plan === 'basic' ? '❌' : '✅'}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Premium Support</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Methods */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                Payment Methods\n              </CardTitle>\n              <CardDescription>\n                Manage your payment methods and billing information\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {paymentMethods.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {paymentMethods.map((method) => (\n                    <div key={method.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <CreditCard className=\"w-5 h-5 text-gray-400\" />\n                        <div>\n                          <p className=\"font-medium\">\n                            {method.card?.brand?.toUpperCase()} •••• {method.card?.last4}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            Expires {method.card?.exp_month}/{method.card?.exp_year}\n                          </p>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Remove\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <CreditCard className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No payment methods</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Add a payment method to upgrade your plan.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Billing History */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Billing History\n              </CardTitle>\n              <CardDescription>\n                View and download your past invoices\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {invoices.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {invoices.map((invoice) => (\n                    <div key={invoice.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          invoice.status === 'paid' ? 'bg-green-500' : \n                          invoice.status === 'pending' ? 'bg-yellow-500' : 'bg-red-500'\n                        }`} />\n                        <div>\n                          <p className=\"font-medium\">\n                            {formatAmount(invoice.amount, invoice.currency)}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            {formatDate(invoice.created)} • {invoice.description || 'Subscription'}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          invoice.status === 'paid' ? 'bg-green-100 text-green-800' :\n                          invoice.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                          'bg-red-100 text-red-800'\n                        }`}>\n                          {invoice.status}\n                        </span>\n                        {invoice.invoice_pdf && (\n                          <Button\n                            onClick={() => window.open(invoice.invoice_pdf, '_blank')}\n                            variant=\"outline\"\n                            size=\"sm\"\n                          >\n                            <Download className=\"w-4 h-4 mr-1\" />\n                            PDF\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No billing history</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Your invoices will appear here once you upgrade.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Quick Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Account Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Current Plan</span>\n                <span className=\"text-sm font-medium\">{planDetails.name}</span>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Monthly Cost</span>\n                <span className=\"text-sm font-medium\">{planDetails.price}</span>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Next Billing</span>\n                <span className=\"text-sm font-medium\">\n                  {user?.subscriptionStatus === 'active' ? 'Next Month' : 'N/A'}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Upgrade Benefits */}\n          {user?.plan === 'basic' && (\n            <Card className=\"border-purple-200 bg-purple-50\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-800\">Why Upgrade?</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-sm text-purple-700\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  More websites & analyses\n                </div>\n                <div className=\"flex items-center gap-2 text-sm text-purple-700\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  Premium templates\n                </div>\n                <div className=\"flex items-center gap-2 text-sm text-purple-700\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  Priority support\n                </div>\n                <div className=\"flex items-center gap-2 text-sm text-purple-700\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  Advanced features\n                </div>\n                \n                <Button \n                  onClick={() => window.location.href = '/pricing'}\n                  className=\"w-full mt-4 bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  View All Plans\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Support */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Need Help?</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button \n                onClick={() => window.location.href = '/dashboard/help'}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n              >\n                <AlertCircle className=\"w-4 h-4 mr-2\" />\n                Contact Support\n              </Button>\n              \n              <Button \n                onClick={() => window.location.href = '/docs'}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                View Documentation\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.578Z"
  },
  {
    "path": "src/app/dashboard/code-editor/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport dynamic from 'next/dynamic'\nimport { useRouter } from 'next/navigation'\nimport VisualEditor from '@/components/VisualEditor'\n\n// Dynamically import Monaco Editor to avoid SSR issues\nconst MonacoEditor = dynamic(() => import('@monaco-editor/react'), { ssr: false })\n\ninterface FileItem {\n  path: string\n  content: string\n  lastModified: Date\n}\n\ninterface Deployment {\n  id: string\n  timestamp: Date\n  status: 'pending' | 'building' | 'success' | 'failed'\n  buildLogs?: string\n  liveUrl?: string\n  errorDetails?: string\n}\n\nexport default function CodeEditorPage() {\n  const router = useRouter()\n  const [files, setFiles] = useState<FileItem[]>([])\n  const [currentFile, setCurrentFile] = useState<FileItem | null>(null)\n  const [code, setCode] = useState('')\n  const [isSaving, setIsSaving] = useState(false)\n  const [isDeploying, setIsDeploying] = useState(false)\n  const [deployments, setDeployments] = useState<Deployment[]>([])\n  const [showDeployments, setShowDeployments] = useState(false)\n  const [editorMode, setEditorMode] = useState<'code' | 'visual'>('code')\n\n  // Load files on mount\n  useEffect(() => {\n    loadFiles()\n    loadDeployments()\n  }, [])\n\n  const loadFiles = async () => {\n    try {\n      const response = await fetch('/api/code-editor/files')\n      if (response.ok) {\n        const data = await response.json()\n        setFiles(data.files)\n        if (data.files.length > 0) {\n          setCurrentFile(data.files[0])\n          setCode(data.files[0].content)\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load files:', error)\n    }\n  }\n\n  const loadDeployments = async () => {\n    try {\n      const response = await fetch('/api/code-editor/deploy')\n      if (response.ok) {\n        const data = await response.json()\n        setDeployments(data.deployments || [])\n      }\n    } catch (error) {\n      console.error('Failed to load deployments:', error)\n    }\n  }\n\n  const saveFile = async () => {\n    if (!currentFile) return\n\n    setIsSaving(true)\n    try {\n      const response = await fetch('/api/code-editor/files', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          filePath: currentFile.path,\n          content: code\n        })\n      })\n\n      if (response.ok) {\n        // Update local file list\n        setFiles(files.map(f => \n          f.path === currentFile.path \n            ? { ...f, content: code, lastModified: new Date() }\n            : f\n        ))\n      }\n    } catch (error) {\n      console.error('Failed to save file:', error)\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const deployToNetlify = async () => {\n    setIsDeploying(true)\n    try {\n      const response = await fetch('/api/code-editor/deploy', {\n        method: 'POST'\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        // Poll for deployment status\n        pollDeploymentStatus(data.deploymentId)\n      }\n    } catch (error) {\n      console.error('Failed to deploy:', error)\n    } finally {\n      setIsDeploying(false)\n    }\n  }\n\n  const pollDeploymentStatus = async (deploymentId: string) => {\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch(`/api/code-editor/deploy?deploymentId=${deploymentId}`)\n        if (response.ok) {\n          const data = await response.json()\n          const deployment = data.deployment\n\n          if (deployment.status === 'success' || deployment.status === 'failed') {\n            clearInterval(interval)\n            loadDeployments()\n          }\n        }\n      } catch (error) {\n        console.error('Failed to poll deployment status:', error)\n        clearInterval(interval)\n      }\n    }, 3000)\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-900 text-white\">\n      {/* Header */}\n      <div className=\"bg-gray-800 border-b border-gray-700 p-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h1 className=\"text-2xl font-bold\">🚀 AFFILIFY Code Editor</h1>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setEditorMode('code')}\n              className={`px-4 py-2 rounded ${editorMode === 'code' ? 'bg-blue-600' : 'bg-gray-700'}`}\n            >\n              💻 Code Editor\n            </button>\n            <button\n              onClick={() => setEditorMode('visual')}\n              className={`px-4 py-2 rounded ${editorMode === 'visual' ? 'bg-blue-600' : 'bg-gray-700'}`}\n            >\n              🎨 Visual Editor\n            </button>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={saveFile}\n            disabled={isSaving}\n            className=\"px-4 py-2 bg-green-600 hover:bg-green-700 rounded disabled:opacity-50\"\n          >\n            {isSaving ? '💾 Saving...' : '💾 Save'}\n          </button>\n          <button\n            onClick={deployToNetlify}\n            disabled={isDeploying}\n            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded disabled:opacity-50\"\n          >\n            {isDeploying ? '🚀 Deploying...' : '🚀 Deploy to Netlify'}\n          </button>\n          <button\n            onClick={() => setShowDeployments(!showDeployments)}\n            className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded\"\n          >\n            📜 Deployments\n          </button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* File Explorer */}\n        <div className=\"w-64 bg-gray-800 border-r border-gray-700 overflow-y-auto\">\n          <div className=\"p-4\">\n            <h2 className=\"text-lg font-semibold mb-4\">📁 Files</h2>\n            {files.map((file) => (\n              <div\n                key={file.path}\n                onClick={() => {\n                  setCurrentFile(file)\n                  setCode(file.content)\n                }}\n                className={`p-2 mb-1 rounded cursor-pointer hover:bg-gray-700 ${\n                  currentFile?.path === file.path ? 'bg-gray-700' : ''\n                }`}\n              >\n                <div className=\"text-sm truncate\">{file.path.split('/').pop()}</div>\n                <div className=\"text-xs text-gray-400 truncate\">{file.path}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Editor Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {editorMode === 'code' ? (\n            <>\n              {/* File Tab */}\n              {currentFile && (\n                <div className=\"bg-gray-800 border-b border-gray-700 px-4 py-2\">\n                  <span className=\"text-sm\">{currentFile.path}</span>\n                </div>\n              )}\n\n              {/* Monaco Editor */}\n              <div className=\"flex-1\">\n                <MonacoEditor\n                  height=\"100%\"\n                  language=\"typescript\"\n                  theme=\"vs-dark\"\n                  value={code}\n                  onChange={(value) => setCode(value || '')}\n                  options={{\n                    minimap: { enabled: true },\n                    fontSize: 14,\n                    wordWrap: 'on',\n                    automaticLayout: true,\n                  }}\n                />\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1\">\n              <VisualEditor onCodeChange={(newCode) => setCode(newCode)} />\n            </div>\n          )}\n        </div>\n\n        {/* Deployments Panel */}\n        {showDeployments && (\n          <div className=\"w-96 bg-gray-800 border-l border-gray-700 overflow-y-auto\">\n            <div className=\"p-4\">\n              <h2 className=\"text-lg font-semibold mb-4\">📜 Deployment History</h2>\n              {deployments.length === 0 ? (\n                <p className=\"text-gray-400\">No deployments yet</p>\n              ) : (\n                deployments.map((deployment) => (\n                  <div\n                    key={deployment.id}\n                    className=\"mb-4 p-3 bg-gray-700 rounded\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`px-2 py-1 rounded text-xs ${\n                        deployment.status === 'success' ? 'bg-green-600' :\n                        deployment.status === 'failed' ? 'bg-red-600' :\n                        deployment.status === 'building' ? 'bg-yellow-600' :\n                        'bg-gray-600'\n                      }`}>\n                        {deployment.status.toUpperCase()}\n                      </span>\n                      <span className=\"text-xs text-gray-400\">\n                        {new Date(deployment.timestamp).toLocaleString()}\n                      </span>\n                    </div>\n                    {deployment.liveUrl && (\n                      <a\n                        href={deployment.liveUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-400 hover:underline text-sm block mb-2\"\n                      >\n                        🌐 View Live\n                      </a>\n                    )}\n                    {deployment.buildLogs && (\n                      <pre className=\"text-xs bg-gray-900 p-2 rounded overflow-x-auto\">\n                        {deployment.buildLogs}\n                      </pre>\n                    )}\n                    {deployment.errorDetails && (\n                      <div className=\"mt-2 p-2 bg-red-900 rounded text-sm\">\n                        ❌ {deployment.errorDetails}\n                      </div>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.578Z"
  },
  {
    "path": "src/app/dashboard/create-website/basic/page.tsx",
    "content": "\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Globe,\n  Crown,\n  Sparkles,\n  ArrowRight,\n  AlertCircle,\n  Palette,\n  Type,\n  Image as ImageIcon,\n  Loader2,\n  CheckCircle,\n  ExternalLink,\n  Zap,\n  Target,\n  Wand2,\n  CreditCard\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\n\ninterface User {\n  id: string\n  name: string\n  email: string\n  plan: 'basic' | 'pro' | 'enterprise'\n  websiteCount: number\n}\n\nexport default function BasicCreateWebsite() {\n  const [user, setUser] = useState<User | null>(null)\n  const [currentWebsites, setCurrentWebsites] = useState(0)\n  const [userPlan, setUserPlan] = useState(\"basic\") // Default to basic, fetch actual plan\n  const maxWebsites = 3\n  const [affiliateLink, setAffiliateLink] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [upgradeLoading, setUpgradeLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [generatedWebsite, setGeneratedWebsite] = useState<any>(null)\n  const router = useRouter()\n\n  // Plan limits\n  const planLimits = {\n    basic: { websites: 3, name: 'Basic (FREE)' },\n    pro: { websites: 10, name: 'Pro ($29)' },\n    enterprise: { websites: 999, name: 'Enterprise ($99)' }\n  }\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(\"/api/user/data\"); // Assuming an API endpoint for user data\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data);\n          setCurrentWebsites(data.websiteCount || 0); // Assuming websiteCount is part of user data\n          setUserPlan(data.plan || \"basic\"); // Assuming plan is part of user data\n        } else {\n          console.error(\"Failed to fetch user data\");\n          router.push('/login'); // Redirect to login if user data cannot be fetched\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n        router.push('/login'); // Redirect to login on error\n      }\n    };\n    fetchUserData();\n  }, []);\n\n  const validateUrl = (url: string) => {\n    try {\n      new URL(url)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  const handleUpgrade = async (plan: 'pro' | 'enterprise') => {\n    setUpgradeLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch('/api/stripe/create-checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ plan }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        // Redirect to Stripe checkout\n        window.location.href = data.checkoutUrl\n      } else {\n        setError(data.message || 'Failed to create checkout session')\n      }\n    } catch (error) {\n      console.error('Upgrade error:', error)\n      setError('An error occurred while processing your upgrade')\n    } finally {\n      setUpgradeLoading(false)\n    }\n  }\n\n  const handleSubmit = async () => {\n    setLoading(true)\n    setError('')\n    setSuccess('')\n    setGeneratedWebsite(null)\n\n    try {\n      // Validation\n      if (!affiliateLink.trim()) {\n        setError('Please enter an affiliate link')\n        setLoading(false)\n        return\n      }\n\n      if (!validateUrl(affiliateLink)) {\n        setError('Please enter a valid URL (include https://)')\n        setLoading(false)\n        return\n      }\n\n      // Call the generate-from-link API\n      const response = await fetch('/api/ai/generate-from-link', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          productUrl: affiliateLink.trim()\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setGeneratedWebsite(data.website)\n        setSuccess('Professional affiliate website created successfully!')\n        await fetchUserData(); // Reload user data to update website count\n      } else {\n        setError(data.message || 'Failed to create website')\n      }\n    } catch (error) {\n      console.error('Website creation error:', error)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const canCreateWebsite = () => {\n    if (!user) return false\n    const limit = planLimits[user.plan].websites\n    return user.websiteCount < limit\n  }\n\n  const getRemainingWebsites = () => {\n    if (!user) return 0\n    const limit = planLimits[user.plan].websites\n    return Math.max(0, limit - user.websiteCount)\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create New Website</h1>\n            <p className=\"text-gray-700\">Basic Plan - Simple affiliate website creation</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"secondary\" className=\"bg-gray-700 text-gray-900\">\n              Basic Plan: {user.websiteCount}/{planLimits[user.plan].websites} websites\n            </Badge>\n            <Button asChild className=\"bg-purple-600 hover:bg-purple-700\">\n              <Link href=\"/pricing\">\n                <Crown className=\"w-4 h-4 mr-2\" />\n                Upgrade for More\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        {/* Error/Success Messages */}\n        {error && (\n          <Card className=\"bg-red-600/20 border-red-600/30 mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <AlertCircle className=\"w-6 h-6 text-red-400\" />\n                <div>\n                  <h3 className=\"text-red-400 font-medium\">Error</h3>\n                  <p className=\"text-gray-700\">{error}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {success && (\n          <Card className=\"bg-green-600/20 border-green-600/30 mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"w-6 h-6 text-green-400\" />\n                <div>\n                  <h3 className=\"text-green-400 font-medium\">Success</h3>\n                  <p className=\"text-gray-700\">{success}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {!canCreateWebsite() && (\n          <Card className=\"bg-red-600/20 border-red-600/30 mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <AlertCircle className=\"w-6 h-6 text-red-400\" />\n                <div>\n                  <h3 className=\"text-red-400 font-medium\">Website Limit Reached</h3>\n                  <p className=\"text-gray-700\">You've reached your Basic plan limit of {planLimits[user.plan].websites} websites. Upgrade to Pro for more websites!</p>\n                </div>\n                <Button asChild className=\"bg-purple-600 hover:bg-purple-700 ml-auto\">\n                  <Link href=\"/pricing\">Upgrade Now</Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Website Details Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Website Details</CardTitle>\n                <CardDescription className=\"text-gray-700\">\n                  Paste your affiliate link and our AI will create a professional website\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"affiliateLink\" className=\"text-gray-900\">Affiliate Link</Label>\n                  <Input\n                    id=\"affiliateLink\"\n                    placeholder=\"https://amazon.com/product-link or any affiliate URL\"\n                    value={affiliateLink}\n                    onChange={(e) => {\n                      setAffiliateLink(e.target.value)\n                      setError('')\n                    }}\n                    className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30 text-gray-900 placeholder-gray-400\"\n                    disabled={!canCreateWebsite() || loading}\n                  />\n                  <p className=\"text-sm text-gray-700\">\n                    Works with Amazon, ClickBank, ShareASale, and any product URL\n                  </p>\n                </div>\n\n                {/* Create Button */}\n                <Button \n                  className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 disabled:opacity-50\"\n                  disabled={!canCreateWebsite() || !affiliateLink || loading}\n                  onClick={handleSubmit}\n                >\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Creating Website...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Create Website with AI\n                    </>\n                  )}\n                </Button>\n\n                {/* Generated Website Result */}\n                {generatedWebsite && (\n                  <div className=\"mt-6 p-6 bg-green-500/20 border border-green-500/30 rounded-lg backdrop-blur-sm\">\n                    <h3 className=\"text-lg font-semibold text-green-100 mb-4 flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 mr-2\" />\n                      Website Created Successfully!\n                    </h3>\n                    \n                    <div className=\"space-y-3\">\n                      <div>\n                        <span className=\"text-green-200 font-medium\">Title: </span>\n                        <span className=\"text-green-100\">{generatedWebsite.title}</span>\n                      </div>\n                      \n                      <div>\n                        <span className=\"text-green-200 font-medium\">URL: </span>\n                        <a \n                          href={generatedWebsite.url} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-green-100 hover:text-gray-900 underline inline-flex items-center\"\n                        >\n                          {generatedWebsite.url}\n                          <ExternalLink className=\"w-4 h-4 ml-1\" />\n                        </a>\n                      </div>\n                      \n                      <div className=\"flex gap-3 mt-4\">\n                        <Button\n                          onClick={() => window.open(generatedWebsite.previewUrl, '_blank')}\n                          variant=\"outline\"\n                          className=\"border-green-400 text-green-100 hover:bg-green-500/20\"\n                        >\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          Preview Website\n                        </Button>\n                        \n                        <Button\n                          onClick={() => router.push('/dashboard/my-websites')}\n                          className=\"bg-green-600 hover:bg-green-700 text-gray-900\"\n                        >\n                          <ArrowRight className=\"w-4 h-4 mr-2\" />\n                          Manage Websites\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Plan Limits */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Basic Plan Limits</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Websites</span>\n                  <span className=\"text-gray-900 font-medium\">{user.websiteCount}/{planLimits[user.plan].websites}</span>\n                </div>\n                <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-purple-600 h-2 rounded-full transition-all\"\n                    style={{ width: `${(user.websiteCount / planLimits[user.plan].websites) * 100}%` }}\n                  ></div>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center text-gray-700\">\n                    <Globe className=\"w-4 h-4 mr-2\" />\n                    Basic templates only\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Type className=\"w-4 h-4 mr-2\" />\n                    AI content generation\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <ImageIcon className=\"w-4 h-4 mr-2\" />\n                    Basic image library\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Upgrade Benefits */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Upgrade to Pro</CardTitle>\n                <CardDescription className=\"text-gray-700\">\n                  Get more websites and features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-gray-700\">\n                    <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                    <span>10 websites (vs 3)</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Palette className=\"w-4 h-4 mr-2 text-purple-400\" />\n                    <span>Premium templates</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Globe className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    <span>Custom domains</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Sparkles className=\"w-4 h-4 mr-2 text-green-400\" />\n                    <span>Advanced analytics</span>\n                  </div>\n                </div>\n                <Button asChild className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\">\n                  <Link href=\"/pricing\">\n                    Upgrade to Pro - $29/month\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Help */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Need Help?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 text-sm mb-4\">\n                  Check our documentation for website creation tips and best practices.\n                </p>\n                <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                  <Link href=\"/docs\">\n                    View Documentation\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.579Z"
  },
  {
    "path": "src/app/dashboard/create-website/enterprise/page.tsx",
    "content": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Globe,\n  Crown,\n  Sparkles,\n  ArrowRight,\n  AlertCircle,\n  Palette,\n  Type,\n  Image as ImageIcon,\n  Loader2,\n  CheckCircle,\n  ExternalLink,\n  Star,\n  Shield,\n  Users,\n  Database,\n  Code,\n  Infinity,\n  Zap,\n  Target,\n  Wand2,\n  CreditCard,\n  BarChart3,\n  TestTube\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\n\ninterface User {\n  id: string\n  name: string\n  email: string\n  plan: 'basic' | 'pro' | 'enterprise'\n  websiteCount: number\n}\n\nexport default function EnterpriseCreateWebsite() {\n  const [user, setUser] = useState<User | null>(null)\n  const [currentWebsites, setCurrentWebsites] = useState(0)\n  const [userPlan, setUserPlan] = useState(\"enterprise\") // Default to enterprise, fetch actual plan\n  const [affiliateLink, setAffiliateLink] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [generatedWebsite, setGeneratedWebsite] = useState<any>(null)\n  const router = useRouter()\n\n  // Plan limits (Enterprise has effectively unlimited websites)\n  const planLimits = {\n    basic: { websites: 3, name: 'Basic (FREE)' },\n    pro: { websites: 10, name: 'Pro ($29)' },\n    enterprise: { websites: Infinity, name: 'Enterprise ($99)' }\n  }\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(\"/api/user/data\"); // Assuming an API endpoint for user data\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data);\n          setCurrentWebsites(data.websiteCount || 0); // Assuming websiteCount is part of user data\n          setUserPlan(data.plan || \"enterprise\"); // Assuming plan is part of user data\n        } else {\n          console.error(\"Failed to fetch user data\");\n          router.push('/login'); // Redirect to login if user data cannot be fetched\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n        router.push('/login'); // Redirect to login on error\n      }\n    };\n    fetchUserData();\n  }, []);\n\n  const validateUrl = (url: string) => {\n    try {\n      new URL(url)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  const handleSubmit = async () => {\n    setLoading(true)\n    setError('')\n    setSuccess('')\n    setGeneratedWebsite(null)\n\n    try {\n      // Validation\n      if (!affiliateLink.trim()) {\n        setError('Please enter an affiliate link')\n        setLoading(false)\n        return\n      }\n\n      if (!validateUrl(affiliateLink)) {\n        setError('Please enter a valid URL (include https://)')\n        setLoading(false)\n        return\n      }\n\n      // Call the generate-from-link API with Enterprise plan features\n      const response = await fetch('/api/ai/generate-from-link', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          productUrl: affiliateLink.trim(),\n          plan: 'enterprise' // Include plan for enhanced features\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setGeneratedWebsite(data.website)\n        setSuccess('Enterprise-grade website created successfully!')\n        await fetchUserData(); // Reload user data to update website count\n      } else {\n        setError(data.message || 'Failed to create website')\n      }\n    } catch (error) {\n      console.error('Website creation error:', error)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900\">\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create New Website</h1>\n          <p className=\"text-gray-900/80\">Enterprise plan - Unlimited professional website creation</p>\n          \n          {/* Plan Status */}\n          <div className=\"mt-4 flex items-center gap-4\">\n            <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm rounded-lg px-4 py-2 border border-white border-opacity-30\">\n              <Crown className=\"w-4 h-4 inline mr-2 text-blue-400\" />\n              <span className=\"text-gray-900/80\">Current Plan: </span>\n              <span className=\"text-gray-900 font-semibold\">{planLimits[user.plan].name}</span>\n            </div>\n            <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm rounded-lg px-4 py-2 border border-white border-opacity-30\">\n              <Infinity className=\"w-4 h-4 inline mr-2 text-green-400\" />\n              <span className=\"text-gray-900/80\">Websites: </span>\n              <span className=\"text-gray-900 font-semibold\">\n                {user.websiteCount} / Unlimited\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Error/Success Messages */}\n        {error && (\n          <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg backdrop-blur-sm flex items-center\">\n            <AlertCircle className=\"w-5 h-5 text-red-400 mr-3\" />\n            <span className=\"text-red-100\">{error}</span>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-lg backdrop-blur-sm flex items-center\">\n            <CheckCircle className=\"w-5 h-5 text-green-400 mr-3\" />\n            <span className=\"text-green-100\">{success}</span>\n          </div>\n        )}\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Create Website Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 flex items-center gap-2\">\n                  <Wand2 className=\"w-5 h-5\" />\n                  Enterprise Website Creation\n                </CardTitle>\n                <CardDescription className=\"text-gray-900/70\">\n                  Create your enterprise-grade affiliate website with unlimited features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* URL Input */}\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-gray-900\">\n                    Affiliate Link *\n                  </label>\n                  <Input\n                    type=\"url\"\n                    placeholder=\"https://amazon.com/product-link or any affiliate URL\"\n                    value={affiliateLink}\n                    onChange={(e) => {\n                      setAffiliateLink(e.target.value)\n                      setError('')\n                    }}\n                    className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30 text-gray-900 placeholder:text-gray-900/50\"\n                    disabled={loading}\n                  />\n                  <p className=\"text-sm text-gray-900/60\">\n                    Enterprise plan includes all premium features, unlimited websites, team collaboration, and white-label options\n                  </p>\n                </div>\n\n                {/* Enterprise Features Info */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-10 rounded-lg p-4 border border-white/10\">\n                    <div className=\"flex items-center space-x-3\">\n                      <BarChart3 className=\"w-5 h-5 text-blue-400\" />\n                      <div>\n                        <h4 className=\"text-gray-900 font-medium\">Enterprise Analytics</h4>\n                        <p className=\"text-gray-900/60 text-sm\">Advanced insights & reporting</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-10 rounded-lg p-4 border border-white/10\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Users className=\"w-5 h-5 text-purple-400\" />\n                      <div>\n                        <h4 className=\"text-gray-900 font-medium\">Team Collaboration</h4>\n                        <p className=\"text-gray-900/60 text-sm\">Seamless teamwork & sharing</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-10 rounded-lg p-4 border border-white/10\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Shield className=\"w-5 h-5 text-green-400\" />\n                      <div>\n                        <h4 className=\"text-gray-900 font-medium\">White Labeling</h4>\n                        <p className=\"text-gray-900/60 text-sm\">Brand your websites as your own</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-10 rounded-lg p-4 border border-white/10\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Code className=\"w-5 h-5 text-yellow-400\" />\n                      <div>\n                        <h4 className=\"text-gray-900 font-medium\">API Access</h4>\n                        <p className=\"text-gray-900/60 text-sm\">Integrate with your existing tools</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Generate Button */}\n                <Button \n                  className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-gray-900 font-semibold py-3 text-lg\"\n                  disabled={loading || !affiliateLink.trim()}\n                  onClick={handleSubmit}\n                >\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                      Creating Enterprise Website...\n                    </>\n                  ) : (\n                    <>\n                      <Wand2 className=\"w-5 h-5 mr-2\" />\n                      Generate Enterprise Website\n                    </>\n                  )}\n                </Button>\n\n                {/* Generated Website Result */}\n                {generatedWebsite && (\n                  <div className=\"mt-6 p-6 bg-green-500/20 border border-green-500/30 rounded-lg backdrop-blur-sm\">\n                    <h3 className=\"text-lg font-semibold text-green-100 mb-4 flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 mr-2\" />\n                      Enterprise Website Created Successfully!\n                    </h3>\n                    \n                    <div className=\"space-y-3\">\n                      <div>\n                        <span className=\"text-green-200 font-medium\">Title: </span>\n                        <span className=\"text-green-100\">{generatedWebsite.title}</span>\n                      </div>\n                      \n                      <div>\n                        <span className=\"text-green-200 font-medium\">URL: </span>\n                        <a \n                          href={generatedWebsite.url} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-green-100 hover:text-gray-900 underline inline-flex items-center\"\n                        >\n                          {generatedWebsite.url}\n                          <ExternalLink className=\"w-4 h-4 ml-1\" />\n                        </a>\n                      </div>\n                      \n                      <div className=\"flex gap-3 mt-4\">\n                        <Button\n                          onClick={() => window.open(generatedWebsite.previewUrl, '_blank')}\n                          variant=\"outline\"\n                          className=\"border-green-400 text-green-100 hover:bg-green-500/20\"\n                        >\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          Preview Website\n                        </Button>\n                        \n                        <Button\n                          onClick={() => router.push('/dashboard/my-websites')}\n                          className=\"bg-green-600 hover:bg-green-700 text-gray-900\"\n                        >\n                          <ArrowRight className=\"w-4 h-4 mr-2\" />\n                          Manage Websites\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Plan Status */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Enterprise Plan Status</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Websites Created</span>\n                  <span className=\"text-gray-900 font-medium\">{user.websiteCount}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Website Limit</span>\n                  <span className=\"text-gray-900 font-medium flex items-center\">\n                    <Infinity className=\"w-4 h-4 mr-1\" />\n                    Unlimited\n                  </span>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center text-gray-700\">\n                    <Shield className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    Enterprise templates\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Users className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    Team collaboration enabled\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Database className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    Advanced data analytics\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Code className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    API access enabled\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Enterprise Benefits */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Enterprise Benefits</CardTitle>\n                <CardDescription className=\"text-gray-700\">\n                  Your exclusive enterprise features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-gray-700\">\n                    <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                    <span>Unlimited websites</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Users className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    <span>Team collaboration</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Shield className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    <span>White labeling</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Code className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    <span>API access</span>\n                  </div>\n                </div>\n                <Button asChild className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700\">\n                  <Link href=\"/dashboard/team-collaboration\">\n                    Manage Team Access\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Help */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Enterprise Support</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 text-sm mb-4\">\n                  Need help? As an Enterprise customer, you have access to priority support.\n                </p>\n                <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                  <Link href=\"/dashboard/support\">\n                    Contact Enterprise Support\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.579Z"
  },
  {
    "path": "src/app/dashboard/create-website/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  Zap, \n  Globe, \n  Target, \n  Wand2, \n  CheckCircle, \n  Loader2,\n  ArrowRight,\n  Crown,\n  AlertCircle,\n  ExternalLink,\n  CreditCard\n} from 'lucide-react'\n\ninterface User {\n  id: string\n  name: string\n  email: string\n  plan: 'basic' | 'pro' | 'enterprise'\n  websiteCount: number\n}\n\nexport default function CreateWebsitePage() {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [upgradeLoading, setUpgradeLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [affiliateLink, setAffiliateLink] = useState('')\n  const [generatedWebsite, setGeneratedWebsite] = useState<any>(null)\n  const router = useRouter()\n\n  // Plan limits\n  const planLimits = {\n    basic: { websites: 3, name: 'Basic (FREE)' },\n    pro: { websites: 10, name: 'Pro ($29)' },\n    enterprise: { websites: 999, name: 'Enterprise ($99)' }\n  }\n\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n  const loadUserData = async () => {\n    try {\n      const response = await fetch('/api/auth/me')\n      if (response.ok) {\n        const data = await response.json()\n        setUser(data.user)\n      } else {\n        router.push('/login')\n      }\n    } catch (error) {\n      console.error('Error loading user data:', error)\n      router.push('/login')\n    }\n  }\n\n  const validateUrl = (url: string) => {\n    try {\n      new URL(url)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  const handleUpgrade = async (plan: 'pro' | 'enterprise') => {\n    setUpgradeLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch('/api/stripe/create-checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ plan }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        // Redirect to Stripe checkout\n        window.location.href = data.checkoutUrl\n      } else {\n        setError(data.message || 'Failed to create checkout session')\n      }\n    } catch (error) {\n      console.error('Upgrade error:', error)\n      setError('An error occurred while processing your upgrade')\n    } finally {\n      setUpgradeLoading(false)\n    }\n  }\n\n  const handleSubmit = async () => {\n    setLoading(true)\n    setError('')\n    setSuccess('')\n    setGeneratedWebsite(null)\n\n    try {\n      // Validation\n      if (!affiliateLink.trim()) {\n        setError('Please enter an affiliate link')\n        setLoading(false)\n        return\n      }\n\n      if (!validateUrl(affiliateLink)) {\n        setError('Please enter a valid URL (include https://)')\n        setLoading(false)\n        return\n      }\n\n      // Call the generate-from-link API\n      const response = await fetch('/api/ai/generate-from-link', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          productUrl: affiliateLink.trim()\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setGeneratedWebsite(data.website)\n        setSuccess('Professional affiliate website created successfully!')\n        // Reload user data to update website count\n        await loadUserData()\n      } else {\n        if (data.upgradeRequired) {\n          setError(data.message)\n        } else {\n          setError(data.message || 'Failed to create website')\n        }\n      }\n    } catch (error) {\n      console.error('Website creation error:', error)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const canCreateWebsite = () => {\n    if (!user) return false\n    const limit = planLimits[user.plan].websites\n    return user.websiteCount < limit\n  }\n\n  const getRemainingWebsites = () => {\n    if (!user) return 0\n    const limit = planLimits[user.plan].websites\n    return Math.max(0, limit - user.websiteCount)\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create New Website</h1>\n        <p className=\"text-gray-900/80\">Basic plan - Simple affiliate website creation</p>\n        \n        {/* Plan Status */}\n        <div className=\"mt-4 flex items-center gap-4\">\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm rounded-lg px-4 py-2 border border-white border-opacity-30\">\n            <span className=\"text-gray-900/80\">Current Plan: </span>\n            <span className=\"text-gray-900 font-semibold\">{planLimits[user.plan].name}</span>\n          </div>\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm rounded-lg px-4 py-2 border border-white border-opacity-30\">\n            <span className=\"text-gray-900/80\">Websites: </span>\n            <span className=\"text-gray-900 font-semibold\">\n              {user.websiteCount} / {planLimits[user.plan].websites === 999 ? '∞' : planLimits[user.plan].websites}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Error/Success Messages */}\n      {error && (\n        <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg backdrop-blur-sm flex items-center\">\n          <AlertCircle className=\"w-5 h-5 text-red-400 mr-3\" />\n          <span className=\"text-red-100\">{error}</span>\n        </div>\n      )}\n\n      {success && (\n        <div className=\"mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-lg backdrop-blur-sm flex items-center\">\n          <CheckCircle className=\"w-5 h-5 text-green-400 mr-3\" />\n          <span className=\"text-green-100\">{success}</span>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Create Website Form */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900 flex items-center gap-2\">\n                <Wand2 className=\"w-5 h-5\" />\n                Website Details\n              </CardTitle>\n              <CardDescription className=\"text-gray-900/70\">\n                Tell us about your affiliate website\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* URL Input */}\n              <div className=\"space-y-2\">\n                <label className=\"block text-sm font-medium text-gray-900\">\n                  Affiliate Link *\n                </label>\n                <Input\n                  type=\"url\"\n                  placeholder=\"https://amazon.com/product-link or any affiliate URL\"\n                  value={affiliateLink}\n                  onChange={(e) => {\n                    setAffiliateLink(e.target.value)\n                    setError('')\n                  }}\n                  className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30 text-gray-900 placeholder:text-gray-900/50\"\n                  disabled={loading}\n                />\n                <p className=\"text-sm text-gray-900/60\">\n                  Works with Amazon, ClickBank, ShareASale, and any product URL\n                </p>\n              </div>\n\n              {/* Generate Button */}\n              <div className=\"space-y-4\">\n                {canCreateWebsite() ? (\n                  <Button\n                    onClick={handleSubmit}\n                    disabled={loading || !affiliateLink.trim()}\n                    className=\"w-full bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-gray-900 font-semibold py-3 text-lg\"\n                  >\n                    {loading ? (\n                      <>\n                        <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                        Creating Professional Website...\n                      </>\n                    ) : (\n                      <>\n                        <Wand2 className=\"w-5 h-5 mr-2\" />\n                        Generate Website ({getRemainingWebsites()} remaining)\n                      </>\n                    )}\n                  </Button>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <div className=\"p-4 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900/20 border border-orange-500/30 rounded-lg\">\n                      <div className=\"flex items-center mb-2\">\n                        <Crown className=\"w-5 h-5 text-orange-400 mr-2\" />\n                        <span className=\"text-orange-100 font-medium\">Website Limit Reached</span>\n                      </div>\n                      <p className=\"text-orange-200 text-sm\">\n                        You've created {user.websiteCount} websites on your {planLimits[user.plan].name} plan. \n                        Upgrade to create more professional websites.\n                      </p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                      <Button\n                        onClick={() => handleUpgrade('pro')}\n                        disabled={upgradeLoading}\n                        className=\"bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-gray-900\"\n                      >\n                        {upgradeLoading ? (\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        ) : (\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                        )}\n                        Upgrade to Pro ($29)\n                      </Button>\n                      \n                      <Button\n                        onClick={() => handleUpgrade('enterprise')}\n                        disabled={upgradeLoading}\n                        className=\"bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-gray-900\"\n                      >\n                        {upgradeLoading ? (\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        ) : (\n                          <Crown className=\"w-4 h-4 mr-2\" />\n                        )}\n                        Upgrade to Enterprise ($99)\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Generated Website Result */}\n              {generatedWebsite && (\n                <div className=\"mt-6 p-6 bg-green-500/20 border border-green-500/30 rounded-lg backdrop-blur-sm\">\n                  <h3 className=\"text-lg font-semibold text-green-100 mb-4 flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 mr-2\" />\n                    Website Created Successfully!\n                  </h3>\n                  \n                  <div className=\"space-y-3\">\n                    <div>\n                      <span className=\"text-green-200 font-medium\">Title: </span>\n                      <span className=\"text-green-100\">{generatedWebsite.title}</span>\n                    </div>\n                    \n                    <div>\n                      <span className=\"text-green-200 font-medium\">URL: </span>\n                      <a \n                        href={generatedWebsite.url} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-green-100 hover:text-gray-900 underline inline-flex items-center\"\n                      >\n                        {generatedWebsite.url}\n                        <ExternalLink className=\"w-4 h-4 ml-1\" />\n                      </a>\n                    </div>\n                    \n                    <div className=\"flex gap-3 mt-4\">\n                      <Button\n                        onClick={() => window.open(generatedWebsite.previewUrl, '_blank')}\n                        variant=\"outline\"\n                        className=\"border-green-400 text-green-100 hover:bg-green-500/20\"\n                      >\n                        <ExternalLink className=\"w-4 h-4 mr-2\" />\n                        Preview Website\n                      </Button>\n                      \n                      <Button\n                        onClick={() => router.push('/dashboard/my-websites')}\n                        className=\"bg-green-600 hover:bg-green-700 text-gray-900\"\n                      >\n                        <ArrowRight className=\"w-4 h-4 mr-2\" />\n                        Manage Websites\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar - Features & Pricing */}\n        <div className=\"space-y-6\">\n          {/* Features */}\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Basic Plan Limits</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center text-gray-900/80\">\n                <Globe className=\"w-4 h-4 mr-2 text-gray-900\" />\n                Websites: {user.websiteCount}/{planLimits[user.plan].websites}\n              </div>\n              <div className=\"flex items-center text-gray-900/80\">\n                <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n                Basic templates only\n              </div>\n              <div className=\"flex items-center text-gray-900/80\">\n                <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n                AI content generation\n              </div>\n              <div className=\"flex items-center text-gray-900/80\">\n                <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n                Basic image library\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Upgrade to Pro */}\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Upgrade to Pro</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center text-gray-900/80\">\n                <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                10 websites (vs. 3)\n              </div>\n              <div className=\"flex items-center text-gray-900/80\">\n                <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                Premium templates\n              </div>\n              <div className=\"flex items-center text-gray-900/80\">\n                <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                Custom domain support\n              </div>\n              <div className=\"flex items-center text-gray-900/80\">\n                <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                Advanced analytics\n              </div>\n              \n              <Button\n                onClick={() => handleUpgrade('pro')}\n                disabled={upgradeLoading}\n                className=\"w-full bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-gray-900\"\n              >\n                {upgradeLoading ? (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                ) : (\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                )}\n                Upgrade to Pro - $29/month\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
    "lastModified": "2025-10-26T16:31:58.579Z"
  },
  {
    "path": "src/app/dashboard/create-website/pro/page.tsx",
    "content": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Globe,\n  Crown,\n  Sparkles,\n  ArrowRight,\n  AlertCircle,\n  Palette,\n  Type,\n  Image as ImageIcon,\n  Loader2,\n  CheckCircle,\n  ExternalLink,\n  Star,\n  Zap,\n  Target,\n  Wand2,\n  CreditCard,\n  BarChart3,\n  TestTube\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\n\ninterface User {\n  id: string\n  name: string\n  email: string\n  plan: 'basic' | 'pro' | 'enterprise'\n  websiteCount: number\n}\n\nexport default function ProCreateWebsite() {\n  const [user, setUser] = useState<User | null>(null)\n  const [currentWebsites, setCurrentWebsites] = useState(0)\n  const [userPlan, setUserPlan] = useState(\"pro\") // Default to pro, fetch actual plan\n  const maxWebsites = 10\n  const [affiliateLink, setAffiliateLink] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [upgradeLoading, setUpgradeLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [generatedWebsite, setGeneratedWebsite] = useState<any>(null)\n  const router = useRouter()\n\n  // Plan limits\n  const planLimits = {\n    basic: { websites: 3, name: 'Basic (FREE)' },\n    pro: { websites: 10, name: 'Pro ($29)' },\n    enterprise: { websites: 999, name: 'Enterprise ($99)' }\n  }\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(\"/api/user/data\"); // Assuming an API endpoint for user data\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data);\n          setCurrentWebsites(data.websiteCount || 0); // Assuming websiteCount is part of user data\n          setUserPlan(data.plan || \"pro\"); // Assuming plan is part of user data\n        } else {\n          console.error(\"Failed to fetch user data\");\n          router.push('/login'); // Redirect to login if user data cannot be fetched\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n        router.push('/login'); // Redirect to login on error\n      }\n    };\n    fetchUserData();\n  }, []);\n\n  const validateUrl = (url: string) => {\n    try {\n      new URL(url)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  const handleUpgrade = async (plan: 'enterprise') => {\n    setUpgradeLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch('/api/stripe/create-checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ plan }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        // Redirect to Stripe checkout\n        window.location.href = data.checkoutUrl\n      } else {\n        setError(data.message || 'Failed to create checkout session')\n      }\n    } catch (error) {\n      console.error('Upgrade error:', error)\n      setError('An error occurred while processing your upgrade')\n    } finally {\n      setUpgradeLoading(false)\n    }\n  }\n\n  const handleSubmit = async () => {\n    setLoading(true)\n    setError('')\n    setSuccess('')\n    setGeneratedWebsite(null)\n\n    try {\n      // Validation\n      if (!affiliateLink.trim()) {\n        setError('Please enter an affiliate link')\n        setLoading(false)\n        return\n      }\n\n      if (!validateUrl(affiliateLink)) {\n        setError('Please enter a valid URL (include https://)')\n        setLoading(false)\n        return\n      }\n\n      // Call the generate-from-link API with Pro plan features\n      const response = await fetch('/api/ai/generate-from-link', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          productUrl: affiliateLink.trim(),\n          plan: 'pro' // Include plan for enhanced features\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setGeneratedWebsite(data.website)\n        setSuccess('Professional Pro website created successfully!')\n        await fetchUserData(); // Reload user data to update website count\n      } else {\n        if (data.upgradeRequired) {\n          setError(data.message)\n        } else {\n          setError(data.message || 'Failed to create website')\n        }\n      }\n    } catch (error) {\n      console.error('Website creation error:', error)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const canCreateWebsite = () => {\n    if (!user) return false\n    const limit = planLimits[user.plan].websites\n    return user.websiteCount < limit\n  }\n\n  const getRemainingWebsites = () => {\n    if (!user) return 0\n    const limit = planLimits[user.plan].websites\n    return Math.max(0, limit - user.websiteCount)\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900\">\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create New Website</h1>\n          <p className=\"text-gray-900/80\">Pro plan - Advanced affiliate website creation</p>\n          \n          {/* Plan Status */}\n          <div className=\"mt-4 flex items-center gap-4\">\n            <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm rounded-lg px-4 py-2 border border-white border-opacity-30\">\n              <Crown className=\"w-4 h-4 inline mr-2 text-purple-400\" />\n              <span className=\"text-gray-900/80\">Current Plan: </span>\n              <span className=\"text-gray-900 font-semibold\">{planLimits[user.plan].name}</span>\n            </div>\n            <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm rounded-lg px-4 py-2 border border-white border-opacity-30\">\n              <span className=\"text-gray-900/80\">Websites: </span>\n              <span className=\"text-gray-900 font-semibold\">\n                {user.websiteCount} / {planLimits[user.plan].websites === 999 ? '∞' : planLimits[user.plan].websites}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Error/Success Messages */}\n        {error && (\n          <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg backdrop-blur-sm flex items-center\">\n            <AlertCircle className=\"w-5 h-5 text-red-400 mr-3\" />\n            <span className=\"text-red-100\">{error}</span>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-lg backdrop-blur-sm flex items-center\">\n            <CheckCircle className=\"w-5 h-5 text-green-400 mr-3\" />\n            <span className=\"text-green-100\">{success}</span>\n          </div>\n        )}\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Create Website Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-sm border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 flex items-center gap-2\">\n                  <Wand2 className=\"w-5 h-5\" />\n                  Pro Website Creation\n                </CardTitle>\n                <CardDescription className=\"text-gray-900/70\">\n                  Create your professional affiliate website with Pro features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* URL Input */}\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-gray-900\">\n                    Affiliate Link *\n                  </label>\n                  <Input\n                    type=\"url\"\n                    placeholder=\"https://amazon.com/product-link or any affiliate URL\"\n                    value={affiliateLink}\n                    onChange={(e) => {\n                      setAffiliateLink(e.target.value)\n                      setError('')\n                    }}\n                    className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30 text-gray-900 placeholder:text-gray-900/50\"\n                    disabled={loading}\n                  />\n                  <p className=\"text-sm text-gray-900/60\">\n                    Works with Amazon, ClickBank, ShareASale, and any product URL\n                  </p>\n                </div>\n\n                {/* Pro Features */}\n                <Card className=\"bg-purple-600/20 border-purple-400/30\">\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"text-purple-100 font-medium mb-3 flex items-center\">\n                      <Star className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                      Pro Features Included\n                    </h3>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <div className=\"flex items-center text-gray-700\">\n                        <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n                        Premium templates\n                      </div>\n                      <div className=\"flex items-center text-gray-700\">\n                        <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n                        Custom domain support\n                      </div>\n                      <div className=\"flex items-center text-gray-700\">\n                        <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n                        Enhanced SEO\n                      </div>\n                      <div className=\"flex items-center text-gray-700\">\n                        <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n                        Advanced analytics\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Generate Button */}\n                <div className=\"space-y-4\">\n                  {canCreateWebsite() ? (\n                    <Button\n                      onClick={handleSubmit}\n                      disabled={loading || !affiliateLink.trim()}\n                      className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-gray-900 font-semibold py-3 text-lg\"\n                    >\n                      {loading ? (\n                        <>\n                          <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                          Creating Pro Website...\n                        </>\n                      ) : (\n                        <>\n                          <Wand2 className=\"w-5 h-5 mr-2\" />\n                          Generate Pro Website ({getRemainingWebsites()} remaining)\n                        </>\n                      )}\n                    </Button>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      <div className=\"p-4 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900/20 border border-orange-500/30 rounded-lg\">\n                        <div className=\"flex items-center mb-2\">\n                          <Crown className=\"w-5 h-5 text-orange-400 mr-2\" />\n                          <span className=\"text-orange-100 font-medium\">Website Limit Reached</span>\n                        </div>\n                        <p className=\"text-orange-200 text-sm\">\n                          You've reached your Pro plan limit of {planLimits[user.plan].websites} websites. Upgrade to Enterprise for unlimited websites!\n                        </p>\n                      </div>\n                      <Button\n                        onClick={() => handleUpgrade('enterprise')}\n                        disabled={upgradeLoading}\n                        className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-gray-900 font-semibold py-3 text-lg\"\n                      >\n                        {upgradeLoading ? (\n                          <>\n                            <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                            Upgrading...\n                          </>\n                        ) : (\n                          <>\n                            <CreditCard className=\"w-5 h-5 mr-2\" />\n                            Upgrade to Enterprise ($99/month)\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n\n                {/* Generated Website Result */}\n                {generatedWebsite && (\n                  <div className=\"mt-6 p-6 bg-green-500/20 border border-green-500/30 rounded-lg backdrop-blur-sm\">\n                    <h3 className=\"text-lg font-semibold text-green-100 mb-4 flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 mr-2\" />\n                      Pro Website Created Successfully!\n                    </h3>\n                    \n                    <div className=\"space-y-3\">\n                      <div>\n                        <span className=\"text-green-200 font-medium\">Title: </span>\n                        <span className=\"text-green-100\">{generatedWebsite.title}</span>\n                      </div>\n                      \n                      <div>\n                        <span className=\"text-green-200 font-medium\">URL: </span>\n                        <a \n                          href={generatedWebsite.url} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-green-100 hover:text-gray-900 underline inline-flex items-center\"\n                        >\n                          {generatedWebsite.url}\n                          <ExternalLink className=\"w-4 h-4 ml-1\" />\n                        </a>\n                      </div>\n                      \n                      <div className=\"flex gap-3 mt-4\">\n                        <Button\n                          onClick={() => window.open(generatedWebsite.previewUrl, '_blank')}\n                          variant=\"outline\"\n                          className=\"border-green-400 text-green-100 hover:bg-green-500/20\"\n                        >\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          Preview Website\n                        </Button>\n                        \n                        <Button\n                          onClick={() => router.push('/dashboard/my-websites')}\n                          className=\"bg-green-600 hover:bg-green-700 text-gray-900\"\n                        >\n                          <ArrowRight className=\"w-4 h-4 mr-2\" />\n                          Manage Websites\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Plan Limits */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Pro Plan Limits</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-700\">Websites</span>\n                  <span className=\"text-gray-900 font-medium\">{user.websiteCount}/{planLimits[user.plan].websites}</span>\n                </div>\n                <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-purple-600 h-2 rounded-full transition-all\"\n                    style={{ width: `${(user.websiteCount / planLimits[user.plan].websites) * 100}%` }}\n                  ></div>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center text-gray-700\">\n                    <Palette className=\"w-4 h-4 mr-2 text-purple-400\" />\n                    Premium templates\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Type className=\"w-4 h-4 mr-2 text-purple-400\" />\n                    Enhanced AI content\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <ImageIcon className=\"w-4 h-4 mr-2 text-purple-400\" />\n                    Premium image library\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Upgrade Benefits */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Upgrade to Enterprise</CardTitle>\n                <CardDescription className=\"text-gray-700\">\n                  Get unlimited websites and advanced features\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-gray-700\">\n                    <Crown className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                    <span>Unlimited websites</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Palette className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    <span>Enterprise templates</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Globe className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    <span>Team collaboration</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-700\">\n                    <Sparkles className=\"w-4 h-4 mr-2 text-blue-400\" />\n                    <span>Advanced analytics</span>\n                  </div>\n                </div>\n                <Button asChild className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700\">\n                  <Link href=\"/pricing\">\n                    Upgrade to Enterprise - $99/month\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Help */}\n            <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900\">Need Help?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 text-sm mb-4\">\n                  Check our documentation for website creation tips and best practices.\n                </p>\n                <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                  <Link href=\"/docs\">\n                    View Documentation\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.579Z"
  },
  {
    "path": "src/app/dashboard/custom-integrations/page.tsx",
    "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Plug, Plus, Settings, CheckCircle, AlertTriangle, ExternalLink, Zap, Database, Mail, BarChart3, ShoppingCart, Globe, Code, Webhook } from 'lucide-react';\n\ninterface Integration {\n  id: string;\n  name: string;\n  description: string;\n  category: 'analytics' | 'email' | 'ecommerce' | 'social' | 'automation' | 'custom';\n  status: 'connected' | 'disconnected' | 'error' | 'pending';\n  icon: string;\n  provider: string;\n  connectedDate?: Date;\n  lastSync?: Date;\n  settings: Record<string, any>;\n}\n\ninterface WebhookEndpoint {\n  id: string;\n  name: string;\n  url: string;\n  events: string[];\n  status: 'active' | 'inactive';\n  secret: string;\n  createdDate: Date;\n  lastTriggered?: Date;\n  deliveryCount: number;\n}\n\nexport default function CustomIntegrationsPage() {\n  const [integrations, setIntegrations] = useState<Integration[]>([]);\n  const [webhooks, setWebhooks] = useState<WebhookEndpoint[]>([]);\n  const [activeTab, setActiveTab] = useState<'integrations' | 'webhooks' | 'custom' | 'marketplace'>('integrations');\n  const [showConnectModal, setShowConnectModal] = useState(false);\n\n  useEffect(() => {\n    loadIntegrationsData();\n  }, []);\n\n  const loadIntegrationsData = () => {\n    // Mock integrations\n    const mockIntegrations: Integration[] = [\n      {\n        id: '1',\n        name: 'Google Analytics',\n        description: 'Track website performance and user behavior',\n        category: 'analytics',\n        status: 'connected',\n        icon: '📊',\n        provider: 'Google',\n        connectedDate: new Date(Date.now() - 86400000 * 15),\n        lastSync: new Date(Date.now() - 3600000),\n        settings: { trackingId: 'GA-123456789', enhanced: true },\n      },\n      {\n        id: '2',\n        name: 'Mailchimp',\n        description: 'Email marketing and automation',\n        category: 'email',\n        status: 'connected',\n        icon: '📧',\n        provider: 'Mailchimp',\n        connectedDate: new Date(Date.now() - 86400000 * 10),\n        lastSync: new Date(Date.now() - 7200000),\n        settings: { listId: 'abc123', apiKey: 'hidden' },\n      },\n      {\n        id: '3',\n        name: 'Shopify',\n        description: 'E-commerce platform integration',\n        category: 'ecommerce',\n        status: 'error',\n        icon: '🛒',\n        provider: 'Shopify',\n        connectedDate: new Date(Date.now() - 86400000 * 5),\n        lastSync: new Date(Date.now() - 86400000),\n        settings: { storeUrl: 'mystore.shopify.com', webhookUrl: 'configured' },\n      },\n      {\n        id: '4',\n        name: 'Facebook Pixel',\n        description: 'Track conversions and optimize ads',\n        category: 'analytics',\n        status: 'disconnected',\n        icon: '📘',\n        provider: 'Meta',\n        settings: {},\n      },\n      {\n        id: '5',\n        name: 'Zapier',\n        description: 'Automate workflows between apps',\n        category: 'automation',\n        status: 'connected',\n        icon: '⚡',\n        provider: 'Zapier',\n        connectedDate: new Date(Date.now() - 86400000 * 20),\n        lastSync: new Date(Date.now() - 1800000),\n        settings: { webhookUrl: 'configured', activeZaps: 3 },\n      },\n    ];\n\n    // Mock webhooks\n    const mockWebhooks: WebhookEndpoint[] = [\n      {\n        id: '1',\n        name: 'Website Created Webhook',\n        url: 'https://myapp.com/webhooks/website-created',\n        events: ['website.created', 'website.published'],\n        status: 'active',\n        secret: 'whsec_1234567890abcdef',\n        createdDate: new Date(Date.now() - 86400000 * 7),\n        lastTriggered: new Date(Date.now() - 3600000),\n        deliveryCount: 45,\n      },\n      {\n        id: '2',\n        name: 'Analytics Webhook',\n        url: 'https://analytics.myapp.com/affilify-data',\n        events: ['analytics.daily', 'conversion.tracked'],\n        status: 'active',\n        secret: 'whsec_abcdef1234567890',\n        createdDate: new Date(Date.now() - 86400000 * 12),\n        lastTriggered: new Date(Date.now() - 7200000),\n        deliveryCount: 128,\n      },\n      {\n        id: '3',\n        name: 'Payment Webhook',\n        url: 'https://billing.myapp.com/affilify-payments',\n        events: ['payment.succeeded', 'subscription.updated'],\n        status: 'inactive',\n        secret: 'whsec_fedcba0987654321',\n        createdDate: new Date(Date.now() - 86400000 * 3),\n        deliveryCount: 12,\n      },\n    ];\n\n    setIntegrations(mockIntegrations);\n    setWebhooks(mockWebhooks);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'connected':\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'disconnected':\n      case 'inactive': return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n      case 'error': return 'text-red-600 bg-red-100';\n      case 'pending': return 'text-orange-600 bg-orange-100';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'analytics': return <BarChart3 className=\"h-5 w-5\" />;\n      case 'email': return <Mail className=\"h-5 w-5\" />;\n      case 'ecommerce': return <ShoppingCart className=\"h-5 w-5\" />;\n      case 'social': return <Globe className=\"h-5 w-5\" />;\n      case 'automation': return <Zap className=\"h-5 w-5\" />;\n      case 'custom': return <Code className=\"h-5 w-5\" />;\n      default: return <Plug className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'connected':\n      case 'active': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'error': return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center\">\n            <Plug className=\"h-8 w-8 mr-3 text-blue-600\" />\n            Custom Integrations\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Connect AFFILIFY with your favorite tools and services</p>\n        </div>\n        <Button onClick={() => setShowConnectModal(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Integration\n        </Button>\n      </div>\n\n      {/* Integration Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Connected</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{integrations.filter(i => i.status === 'connected').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {integrations.length} total integrations\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Webhooks</CardTitle>\n            <Webhook className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{webhooks.filter(w => w.status === 'active').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {webhooks.reduce((sum, w) => sum + w.deliveryCount, 0)} total deliveries\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Data Synced</CardTitle>\n            <Database className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">98.5%</div>\n            <p className=\"text-xs text-muted-foreground\">Success rate</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Last Sync</CardTitle>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">2m ago</div>\n            <p className=\"text-xs text-muted-foreground\">All systems operational</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b\">\n        <nav className=\"flex space-x-8\">\n          {[\n            { id: 'integrations', label: 'Integrations', icon: Plug },\n            { id: 'webhooks', label: 'Webhooks', icon: Webhook },\n            { id: 'custom', label: 'Custom APIs', icon: Code },\n            { id: 'marketplace', label: 'Marketplace', icon: Globe },\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Integrations Tab */}\n      {activeTab === 'integrations' && (\n        <div className=\"space-y-4\">\n          {integrations.map((integration) => (\n            <Card key={integration.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      {getCategoryIcon(integration.category)}\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-semibold\">{integration.name}</h3>\n                          {getStatusIcon(integration.status)}\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(integration.status)}`}>\n                            {integration.status.charAt(0).toUpperCase() + integration.status.slice(1)}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{integration.description}</p>\n                        <p className=\"text-xs text-gray-500\">Provider: {integration.provider}</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    {integration.status === 'connected' && (\n                      <div className=\"text-right text-sm\">\n                        <p className=\"text-gray-600\">Connected: {integration.connectedDate?.toLocaleDateString()}</p>\n                        <p className=\"text-gray-600\">Last sync: {integration.lastSync?.toLocaleTimeString()}</p>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                      {integration.status === 'connected' ? (\n                        <Button variant=\"outline\" size=\"sm\">\n                          Disconnect\n                        </Button>\n                      ) : (\n                        <Button size=\"sm\">\n                          Connect\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                {integration.status === 'error' && (\n                  <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                    <p className=\"text-sm text-red-800\">\n                      <AlertTriangle className=\"inline h-4 w-4 mr-1\" />\n                      Connection error: Authentication failed. Please reconnect your account.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Webhooks Tab */}\n      {activeTab === 'webhooks' && (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Webhook Endpoints</h2>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Webhook\n            </Button>\n          </div>\n          \n          {webhooks.map((webhook) => (\n            <Card key={webhook.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <h3 className=\"font-semibold\">{webhook.name}</h3>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(webhook.status)}`}>\n                        {webhook.status.charAt(0).toUpperCase() + webhook.status.slice(1)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <code className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 px-2 py-1 rounded text-sm\">{webhook.url}</code>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <ExternalLink className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      \n                      <div className=\"flex flex-wrap gap-1\">\n                        {webhook.events.map((event, index) => (\n                          <span key={index} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded\">\n                            {event}\n                          </span>\n                        ))}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-gray-600\">Created</p>\n                          <p className=\"font-medium\">{webhook.createdDate.toLocaleDateString()}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Last Triggered</p>\n                          <p className=\"font-medium\">\n                            {webhook.lastTriggered ? webhook.lastTriggered.toLocaleTimeString() : 'Never'}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">Deliveries</p>\n                          <p className=\"font-medium\">{webhook.deliveryCount}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      Test\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Logs\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Custom APIs Tab */}\n      {activeTab === 'custom' && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold\">Custom API Integrations</h2>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Build Custom Integrations</CardTitle>\n              <CardDescription>Create custom integrations using our REST API and webhooks</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2 flex items-center\">\n                    <Code className=\"h-5 w-5 mr-2\" />\n                    REST API\n                  </h3>\n                  <p className=\"text-gray-600 mb-3\">\n                    Access all AFFILIFY features programmatically with our comprehensive REST API.\n                  </p>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    View API Docs\n                  </Button>\n                </div>\n                \n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold mb-2 flex items-center\">\n                    <Webhook className=\"h-5 w-5 mr-2\" />\n                    Webhooks\n                  </h3>\n                  <p className=\"text-gray-600 mb-3\">\n                    Receive real-time notifications when events occur in your AFFILIFY account.\n                  </p>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Setup Webhooks\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <h3 className=\"font-semibold mb-2\">Need Help?</h3>\n                <p className=\"text-gray-600 mb-3\">\n                  Our integration team can help you build custom solutions for your specific needs.\n                </p>\n                <Button>Contact Integration Team</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Marketplace Tab */}\n      {activeTab === 'marketplace' && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold\">Integration Marketplace</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[\n              { name: 'Stripe', category: 'Payment', description: 'Accept payments and manage subscriptions', icon: '💳', popular: true },\n              { name: 'Slack', category: 'Communication', description: 'Get notifications in your Slack workspace', icon: '💬', popular: false },\n              { name: 'HubSpot', category: 'CRM', description: 'Sync leads and customer data', icon: '🎯', popular: true },\n              { name: 'Airtable', category: 'Database', description: 'Store and organize your data', icon: '📊', popular: false },\n              { name: 'Discord', category: 'Community', description: 'Engage with your community', icon: '🎮', popular: false },\n              { name: 'Notion', category: 'Productivity', description: 'Organize your workflow and notes', icon: '📝', popular: true },\n            ].map((app, index) => (\n              <Card key={index} className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <span className=\"text-2xl\">{app.icon}</span>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold\">{app.name}</h3>\n                        {app.popular && (\n                          <span className=\"px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full\">\n                            Popular\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600\">{app.category}</p>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-sm text-gray-600 mb-4\">{app.description}</p>\n                  \n                  <Button className=\"w-full\">\n                    Connect\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.579Z"
  },
  {
    "path": "src/app/dashboard/email-marketing/page.tsx",
    "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Mail, Users, Send, Plus, Edit, Trash2, BarChart3, Calendar, Target, Zap, Eye, MousePointer } from 'lucide-react';\n\ninterface EmailCampaign {\n  id: string;\n  name: string;\n  subject: string;\n  status: 'draft' | 'scheduled' | 'sent' | 'active';\n  recipients: number;\n  openRate: number;\n  clickRate: number;\n  sentDate?: Date;\n  scheduledDate?: Date;\n  type: 'newsletter' | 'promotional' | 'automated';\n}\n\ninterface EmailTemplate {\n  id: string;\n  name: string;\n  category: string;\n  thumbnail: string;\n  description: string;\n}\n\nexport default function EmailMarketingPage() {\n  const [campaigns, setCampaigns] = useState<EmailCampaign[]>([]);\n  const [templates, setTemplates] = useState<EmailTemplate[]>([]);\n  const [activeTab, setActiveTab] = useState<'campaigns' | 'templates' | 'analytics' | 'subscribers'>('campaigns');\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  useEffect(() => {\n    loadCampaigns();\n    loadTemplates();\n  }, []);\n\n  const loadCampaigns = () => {\n    const mockCampaigns: EmailCampaign[] = [\n      {\n        id: '1',\n        name: 'Welcome Series - New Subscribers',\n        subject: 'Welcome to AFFILIFY! Your journey starts here',\n        status: 'active',\n        recipients: 1250,\n        openRate: 45.2,\n        clickRate: 12.8,\n        type: 'automated',\n      },\n      {\n        id: '2',\n        name: 'Black Friday Deals 2024',\n        subject: '🔥 Exclusive Black Friday Deals - Up to 70% Off!',\n        status: 'sent',\n        recipients: 8500,\n        openRate: 38.7,\n        clickRate: 15.3,\n        sentDate: new Date(Date.now() - 86400000),\n        type: 'promotional',\n      },\n      {\n        id: '3',\n        name: 'Weekly Newsletter #47',\n        subject: 'Top Affiliate Marketing Trends This Week',\n        status: 'scheduled',\n        recipients: 6200,\n        openRate: 0,\n        clickRate: 0,\n        scheduledDate: new Date(Date.now() + 172800000),\n        type: 'newsletter',\n      },\n      {\n        id: '4',\n        name: 'Product Launch - AI Website Builder',\n        subject: 'Introducing: AI-Powered Website Builder',\n        status: 'draft',\n        recipients: 0,\n        openRate: 0,\n        clickRate: 0,\n        type: 'promotional',\n      },\n    ];\n    setCampaigns(mockCampaigns);\n  };\n\n  const loadTemplates = () => {\n    const mockTemplates: EmailTemplate[] = [\n      {\n        id: '1',\n        name: 'Welcome Email',\n        category: 'Onboarding',\n        thumbnail: '/templates/welcome.jpg',\n        description: 'Perfect for welcoming new subscribers',\n      },\n      {\n        id: '2',\n        name: 'Product Promotion',\n        category: 'Sales',\n        thumbnail: '/templates/promotion.jpg',\n        description: 'Drive sales with compelling product showcases',\n      },\n      {\n        id: '3',\n        name: 'Newsletter Template',\n        category: 'Content',\n        thumbnail: '/templates/newsletter.jpg',\n        description: 'Share valuable content with your audience',\n      },\n      {\n        id: '4',\n        name: 'Abandoned Cart',\n        category: 'Automation',\n        thumbnail: '/templates/cart.jpg',\n        description: 'Recover lost sales with targeted reminders',\n      },\n    ];\n    setTemplates(mockTemplates);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'sent': return 'text-blue-600 bg-blue-100';\n      case 'scheduled': return 'text-orange-600 bg-orange-100';\n      case 'draft': return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'newsletter': return <Mail className=\"h-4 w-4\" />;\n      case 'promotional': return <Target className=\"h-4 w-4\" />;\n      case 'automated': return <Zap className=\"h-4 w-4\" />;\n      default: return <Mail className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center\">\n            <Mail className=\"h-8 w-8 mr-3 text-blue-600\" />\n            Email Marketing\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Create, manage, and track your email campaigns</p>\n        </div>\n        <Button onClick={() => setShowCreateModal(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Campaign\n        </Button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Subscribers</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">12,450</div>\n            <p className=\"text-xs text-muted-foreground\">+8.2% from last month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Open Rate</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">42.3%</div>\n            <p className=\"text-xs text-muted-foreground\">+2.1% from last month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Click Rate</CardTitle>\n            <MousePointer className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">14.7%</div>\n            <p className=\"text-xs text-muted-foreground\">+1.3% from last month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Revenue</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">$18,250</div>\n            <p className=\"text-xs text-muted-foreground\">+15.4% from last month</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b\">\n        <nav className=\"flex space-x-8\">\n          {[\n            { id: 'campaigns', label: 'Campaigns', icon: Send },\n            { id: 'templates', label: 'Templates', icon: Mail },\n            { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n            { id: 'subscribers', label: 'Subscribers', icon: Users },\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Campaigns Tab */}\n      {activeTab === 'campaigns' && (\n        <div className=\"space-y-4\">\n          {campaigns.map((campaign) => (\n            <Card key={campaign.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getTypeIcon(campaign.type)}\n                      <div>\n                        <h3 className=\"font-semibold\">{campaign.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{campaign.subject}</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm font-medium\">{campaign.recipients?.toLocaleString() || \"0\"}</p>\n                      <p className=\"text-xs text-gray-500\">Recipients</p>\n                    </div>\n                    \n                    {campaign.status === 'sent' && (\n                      <>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm font-medium\">{campaign.openRate}%</p>\n                          <p className=\"text-xs text-gray-500\">Open Rate</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm font-medium\">{campaign.clickRate}%</p>\n                          <p className=\"text-xs text-gray-500\">Click Rate</p>\n                        </div>\n                      </>\n                    )}\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(campaign.status)}`}>\n                        {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <BarChart3 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n                \n                {campaign.sentDate && (\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    Sent: {campaign.sentDate.toLocaleDateString()} at {campaign.sentDate.toLocaleTimeString()}\n                  </p>\n                )}\n                \n                {campaign.scheduledDate && (\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    Scheduled: {campaign.scheduledDate.toLocaleDateString()} at {campaign.scheduledDate.toLocaleTimeString()}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Templates Tab */}\n      {activeTab === 'templates' && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {templates.map((template) => (\n            <Card key={template.id} className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"aspect-video bg-gray-200 rounded-lg mb-4 flex items-center justify-center\">\n                  <Mail className=\"h-12 w-12 text-gray-400\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">{template.name}</h3>\n                <p className=\"text-sm text-gray-600 mb-2\">{template.description}</p>\n                <span className=\"inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                  {template.category}\n                </span>\n                <div className=\"flex space-x-2 mt-4\">\n                  <Button size=\"sm\" className=\"flex-1\">Use Template</Button>\n                  <Button variant=\"outline\" size=\"sm\">Preview</Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Analytics Tab */}\n      {activeTab === 'analytics' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Campaign Performance</CardTitle>\n              <CardDescription>Open and click rates over time</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                <BarChart3 className=\"h-12 w-12 mr-4\" />\n                <span>Analytics chart would be displayed here</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Subscriber Growth</CardTitle>\n              <CardDescription>New subscribers and unsubscribes</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                <Users className=\"h-12 w-12 mr-4\" />\n                <span>Subscriber growth chart would be displayed here</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle>Top Performing Campaigns</CardTitle>\n              <CardDescription>Campaigns with highest engagement rates</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {campaigns\n                  .filter(c => c.status === 'sent')\n                  .sort((a, b) => b.clickRate - a.clickRate)\n                  .map((campaign) => (\n                    <div key={campaign.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">{campaign.name}</h4>\n                        <p className=\"text-sm text-gray-600\">{campaign.subject}</p>\n                      </div>\n                      <div className=\"flex space-x-6 text-sm\">\n                        <div className=\"text-center\">\n                          <p className=\"font-medium\">{campaign.openRate}%</p>\n                          <p className=\"text-gray-500\">Open Rate</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"font-medium\">{campaign.clickRate}%</p>\n                          <p className=\"text-gray-500\">Click Rate</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Subscribers Tab */}\n      {activeTab === 'subscribers' && (\n        <div className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">Subscriber Management</h2>\n              <p className=\"text-gray-600\">Manage your email subscribers and segments</p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Import Subscribers\n              </Button>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Subscriber\n              </Button>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Subscriber Segments</CardTitle>\n              <CardDescription>Organize your subscribers into targeted groups</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-medium\">All Subscribers</h3>\n                  <p className=\"text-2xl font-bold text-blue-600\">12,450</p>\n                  <p className=\"text-sm text-gray-600\">Total active subscribers</p>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-medium\">High Engagement</h3>\n                  <p className=\"text-2xl font-bold text-green-600\">3,280</p>\n                  <p className=\"text-sm text-gray-600\">Opens 80%+ of emails</p>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-medium\">New Subscribers</h3>\n                  <p className=\"text-2xl font-bold text-orange-600\">1,150</p>\n                  <p className=\"text-sm text-gray-600\">Joined in last 30 days</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Subscribers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { email: 'john.doe@example.com', date: '2024-01-15', source: 'Website Signup' },\n                  { email: 'jane.smith@example.com', date: '2024-01-14', source: 'Lead Magnet' },\n                  { email: 'mike.johnson@example.com', date: '2024-01-13', source: 'Social Media' },\n                  { email: 'sarah.wilson@example.com', date: '2024-01-12', source: 'Referral' },\n                ].map((subscriber, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{subscriber.email}</p>\n                      <p className=\"text-sm text-gray-600\">Source: {subscriber.source}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm\">{subscriber.date}</p>\n                      <Button variant=\"outline\" size=\"sm\">Manage</Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/enterprise/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Globe, \n  BarChart3, \n  Crown,\n  Plus,\n  Settings,\n  TrendingUp,\n  Users,\n  Eye,\n  MousePointer,\n  TestTube,\n  MessageSquare,\n  Zap,\n  Shield,\n  Infinity,\n  Target,\n  Briefcase\n} from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function EnterpriseDashboard() {\n  const [stats, setStats] = useState({\n    websites: 23,\n    totalViews: 284750,\n    totalClicks: 18947,\n    conversionRate: 6.7,\n    revenue: 47892,\n    teamMembers: 8,\n    activeTests: 12\n  })\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Enterprise Dashboard</h1>\n            <p className=\"text-gray-700\">Complete affiliate marketing command center</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"secondary\" className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-gray-900\">\n              <Crown className=\"w-3 h-3 mr-1\" />\n              Enterprise Plan\n            </Badge>\n            <Button asChild className=\"bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700\">\n              <Link href=\"/dashboard/team-collaboration\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Manage Team\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-7 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Websites</CardTitle>\n              <Infinity className=\"h-4 w-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.websites}</div>\n              <p className=\"text-xs text-gray-400\">Unlimited</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Total Views</CardTitle>\n              <Eye className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalViews?.toLocaleString() || \"0\"}</div>\n              <p className=\"text-xs text-gray-400\">+24% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Total Clicks</CardTitle>\n              <MousePointer className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalClicks?.toLocaleString() || \"0\"}</div>\n              <p className=\"text-xs text-gray-400\">+19% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Conversion</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-orange-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.conversionRate}%</div>\n              <p className=\"text-xs text-gray-400\">+0.8% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Revenue</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">${stats.revenue?.toLocaleString() || \"0\"}</div>\n              <p className=\"text-xs text-gray-400\">+31% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Team</CardTitle>\n              <Users className=\"h-4 w-4 text-cyan-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.teamMembers}</div>\n              <p className=\"text-xs text-gray-400\">Active members</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">A/B Tests</CardTitle>\n              <TestTube className=\"h-4 w-4 text-pink-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.activeTests}</div>\n              <p className=\"text-xs text-gray-400\">Running tests</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Website Management</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Enterprise-level creation & management\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button asChild className=\"w-full bg-purple-600 hover:bg-purple-700\">\n                <Link href=\"/dashboard/create-website/enterprise\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Website\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/my-websites\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  Manage All Sites\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Analytics & Testing</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Advanced insights & optimization\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/advanced-analytics\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Advanced Analytics\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/ab-testing\">\n                  <TestTube className=\"w-4 h-4 mr-2\" />\n                  A/B Testing Suite\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Team & Collaboration</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Manage your team & workflows\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/team-collaboration\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Team Management\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/api-management\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  API Management\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Enterprise Features</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                White-label & custom solutions\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/custom-integrations\">\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  White-label Setup\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/advanced-reporting\">\n                  <Briefcase className=\"w-4 h-4 mr-2\" />\n                  Custom Reports\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Advanced Dashboard Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Top Performing Websites</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Your highest converting sites\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Target className=\"w-5 h-5 text-green-400\" />\n                    <div>\n                      <p className=\"text-gray-900 font-medium\">Tech Reviews Hub</p>\n                      <p className=\"text-gray-400 text-sm\">12.4% conversion</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-green-600 text-gray-900\">$8,247</Badge>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Target className=\"w-5 h-5 text-blue-400\" />\n                    <div>\n                      <p className=\"text-gray-900 font-medium\">Fitness Equipment</p>\n                      <p className=\"text-gray-400 text-sm\">9.8% conversion</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-blue-600 text-gray-900\">$6,892</Badge>\n                </div>\n\n                <div className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Target className=\"w-5 h-5 text-purple-400\" />\n                    <div>\n                      <p className=\"text-gray-900 font-medium\">Home & Garden</p>\n                      <p className=\"text-gray-400 text-sm\">8.1% conversion</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-purple-600 text-gray-900\">$5,234</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Team Activity</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Recent team member actions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3 p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-gray-900 text-sm font-medium\">JS</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-gray-900 font-medium\">John Smith</p>\n                    <p className=\"text-gray-400 text-sm\">Created \"Smart Home\" website</p>\n                  </div>\n                  <span className=\"text-gray-400 text-xs\">2h ago</span>\n                </div>\n\n                <div className=\"flex items-center space-x-3 p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-gray-900 text-sm font-medium\">MJ</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-gray-900 font-medium\">Maria Johnson</p>\n                    <p className=\"text-gray-400 text-sm\">Started A/B test on CTA buttons</p>\n                  </div>\n                  <span className=\"text-gray-400 text-xs\">4h ago</span>\n                </div>\n\n                <div className=\"flex items-center space-x-3 p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-gray-900 text-sm font-medium\">DL</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-gray-900 font-medium\">David Lee</p>\n                    <p className=\"text-gray-400 text-sm\">Generated analytics report</p>\n                  </div>\n                  <span className=\"text-gray-400 text-xs\">6h ago</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">AI Insights & Recommendations</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Enterprise-level optimization suggestions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-green-600/20 border border-green-600/30 rounded-lg\">\n                  <h4 className=\"text-green-400 font-medium mb-2\">🎯 Revenue Opportunity</h4>\n                  <p className=\"text-gray-700 text-sm\">Scale your \"Tech Reviews\" template to 5 more niches for potential $15k+ monthly increase.</p>\n                </div>\n                \n                <div className=\"p-4 bg-blue-600/20 border border-blue-600/30 rounded-lg\">\n                  <h4 className=\"text-blue-400 font-medium mb-2\">📊 Team Efficiency</h4>\n                  <p className=\"text-gray-700 text-sm\">Your team's productivity increased 34% this month. Consider expanding to 12 members.</p>\n                </div>\n\n                <div className=\"p-4 bg-purple-600/20 border border-purple-600/30 rounded-lg\">\n                  <h4 className=\"text-purple-400 font-medium mb-2\">🚀 Market Trend</h4>\n                  <p className=\"text-gray-700 text-sm\">AI tools niche showing 67% growth. Perfect timing to create content in this space.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/help/page.tsx",
    "content": "'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  HelpCircle, \n  MessageCircle, \n  Mail, \n  Phone, \n  FileText, \n  Video, \n  Search,\n  ChevronDown,\n  ChevronRight,\n  ExternalLink,\n  Send,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  Book,\n  Users,\n  Zap,\n  Clock\n} from 'lucide-react'\n\ninterface FAQ {\n  id: string\n  question: string\n  answer: string\n  category: string\n}\n\nconst faqs: FAQ[] = [\n  {\n    id: '1',\n    category: 'Getting Started',\n    question: 'How do I create my first affiliate website?',\n    answer: 'To create your first affiliate website, go to the \"Create Website\" page, enter your affiliate link (from Amazon, ClickBank, etc.), and our AI will generate a professional website for you. The process takes just a few minutes!'\n  },\n  {\n    id: '2',\n    category: 'Getting Started',\n    question: 'What affiliate programs does AFFILIFY support?',\n    answer: 'AFFILIFY works with all major affiliate programs including Amazon Associates, ClickBank, ShareASale, Commission Junction, and any other program that provides affiliate links. Simply paste your affiliate link and we\\'ll handle the rest.'\n  },\n  {\n    id: '3',\n    category: 'Plans & Billing',\n    question: 'What\\'s the difference between Basic, Pro, and Enterprise plans?',\n    answer: 'Basic (FREE): 3 websites, 10 analyses, basic templates. Pro ($29/month): 10 websites, 50 analyses, premium templates, custom domains. Enterprise ($99/month): Unlimited websites/analyses, advanced features, priority support, team collaboration.'\n  },\n  {\n    id: '4',\n    category: 'Plans & Billing',\n    question: 'Can I upgrade or downgrade my plan anytime?',\n    answer: 'Yes! You can upgrade your plan instantly. Downgrades take effect at the end of your current billing period to ensure you don\\'t lose access to features you\\'ve paid for.'\n  },\n  {\n    id: '5',\n    category: 'Website Analysis',\n    question: 'How accurate is the website analysis feature?',\n    answer: 'Our analysis uses Google PageSpeed Insights, advanced AI, and institutional-grade algorithms to provide Moody\\'s/S&P level accuracy. We analyze performance, SEO, conversion potential, and provide actionable recommendations.'\n  },\n  {\n    id: '6',\n    category: 'Website Analysis',\n    question: 'What does the analysis score mean?',\n    answer: 'Scores range from 0-100: 90-100 (Excellent), 80-89 (Very Good), 70-79 (Good), 60-69 (Fair), 50-59 (Poor), 0-49 (Avoid). The score considers technical performance, SEO, user experience, and conversion potential.'\n  },\n  {\n    id: '7',\n    category: 'Technical',\n    question: 'How do I publish my website?',\n    answer: 'Once your website is created, click \"Publish\" to get a live URL. Pro and Enterprise users can also connect custom domains. Your website will be hosted on our fast, secure infrastructure.'\n  },\n  {\n    id: '8',\n    category: 'Technical',\n    question: 'Can I edit my website after it\\'s created?',\n    answer: 'Yes! You can edit content, update affiliate links, change templates (Pro+), and customize the design. All changes are saved automatically and reflected on your live website immediately.'\n  }\n]\n\nexport default function HelpPage() {\n  const [searchQuery, setSearchQuery] = useState('')\n  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null)\n  const [selectedCategory, setSelectedCategory] = useState('All')\n  const [contactForm, setContactForm] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: '',\n    priority: 'normal'\n  })\n  const [submitLoading, setSubmitLoading] = useState(false)\n  const [submitSuccess, setSubmitSuccess] = useState(false)\n\n  const categories = ['All', 'Getting Started', 'Plans & Billing', 'Website Analysis', 'Technical']\n\n  const filteredFAQs = faqs.filter(faq => {\n    const matchesSearch = faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         faq.answer.toLowerCase().includes(searchQuery.toLowerCase())\n    const matchesCategory = selectedCategory === 'All' || faq.category === selectedCategory\n    return matchesSearch && matchesCategory\n  })\n\n  const handleContactSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSubmitLoading(true)\n\n    try {\n      const response = await fetch('/api/support/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(contactForm),\n      })\n\n      if (response.ok) {\n        setSubmitSuccess(true)\n        setContactForm({\n          name: '',\n          email: '',\n          subject: '',\n          message: '',\n          priority: 'normal'\n        })\n      }\n    } catch (error) {\n      console.error('Contact form error:', error)\n    } finally {\n      setSubmitLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"mb-8 text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Help & Support</h1>\n        <p className=\"text-gray-600\">Find answers, get support, and learn how to make the most of AFFILIFY</p>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card className=\"text-center hover:shadow-md transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <Book className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n            <h3 className=\"font-semibold mb-2\">Documentation</h3>\n            <p className=\"text-sm text-gray-600\">Complete guides and tutorials</p>\n            <Button \n              onClick={() => window.location.href = '/docs'}\n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-3\"\n            >\n              View Docs\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center hover:shadow-md transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <Video className=\"w-8 h-8 text-green-600 mx-auto mb-3\" />\n            <h3 className=\"font-semibold mb-2\">Video Tutorials</h3>\n            <p className=\"text-sm text-gray-600\">Step-by-step video guides</p>\n            <Button \n              onClick={() => window.open('https://youtube.com/@affilify', '_blank')}\n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-3\"\n            >\n              Watch Videos\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center hover:shadow-md transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <Users className=\"w-8 h-8 text-purple-600 mx-auto mb-3\" />\n            <h3 className=\"font-semibold mb-2\">Community</h3>\n            <p className=\"text-sm text-gray-600\">Connect with other users</p>\n            <Button \n              onClick={() => window.open('https://discord.gg/affilify', '_blank')}\n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-3\"\n            >\n              Join Discord\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center hover:shadow-md transition-shadow cursor-pointer\">\n          <CardContent className=\"p-6\">\n            <MessageCircle className=\"w-8 h-8 text-orange-600 mx-auto mb-3\" />\n            <h3 className=\"font-semibold mb-2\">Live Chat</h3>\n            <p className=\"text-sm text-gray-600\">Get instant help</p>\n            <Button \n              onClick={() => {\n                // Integrate with your chat system (Intercom, Zendesk, etc.)\n                alert('Chat feature coming soon!')\n              }}\n              variant=\"outline\" \n              size=\"sm\" \n              className=\"mt-3\"\n            >\n              Start Chat\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* FAQ Section */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Search and Filter */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <HelpCircle className=\"w-5 h-5\" />\n                Frequently Asked Questions\n              </CardTitle>\n              <CardDescription>\n                Find quick answers to common questions\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search FAQs...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n\n              {/* Category Filter */}\n              <div className=\"flex flex-wrap gap-2\">\n                {categories.map((category) => (\n                  <Button\n                    key={category}\n                    onClick={() => setSelectedCategory(category)}\n                    variant={selectedCategory === category ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                  >\n                    {category}\n                  </Button>\n                ))}\n              </div>\n\n              {/* FAQ List */}\n              <div className=\"space-y-3\">\n                {filteredFAQs.map((faq) => (\n                  <div key={faq.id} className=\"border rounded-lg\">\n                    <button\n                      onClick={() => setExpandedFAQ(expandedFAQ === faq.id ? null : faq.id)}\n                      className=\"w-full p-4 text-left flex items-center justify-between hover:bg-gray-50\"\n                    >\n                      <span className=\"font-medium\">{faq.question}</span>\n                      {expandedFAQ === faq.id ? (\n                        <ChevronDown className=\"w-4 h-4\" />\n                      ) : (\n                        <ChevronRight className=\"w-4 h-4\" />\n                      )}\n                    </button>\n                    {expandedFAQ === faq.id && (\n                      <div className=\"px-4 pb-4\">\n                        <div className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded\">\n                          {faq.answer}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {filteredFAQs.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <HelpCircle className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No FAQs found</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Try adjusting your search or contact support for help.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Contact Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Mail className=\"w-5 h-5\" />\n                Contact Support\n              </CardTitle>\n              <CardDescription>\n                Can't find what you're looking for? Send us a message\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {submitSuccess ? (\n                <div className=\"text-center py-8\">\n                  <CheckCircle className=\"mx-auto h-12 w-12 text-green-600\" />\n                  <h3 className=\"mt-2 text-lg font-medium text-gray-900\">Message Sent!</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    We'll get back to you within 24 hours.\n                  </p>\n                  <Button \n                    onClick={() => setSubmitSuccess(false)}\n                    className=\"mt-4\"\n                  >\n                    Send Another Message\n                  </Button>\n                </div>\n              ) : (\n                <form onSubmit={handleContactSubmit} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Name *\n                      </label>\n                      <Input\n                        type=\"text\"\n                        required\n                        value={contactForm.name}\n                        onChange={(e) => setContactForm({...contactForm, name: e.target.value})}\n                        placeholder=\"Your full name\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Email *\n                      </label>\n                      <Input\n                        type=\"email\"\n                        required\n                        value={contactForm.email}\n                        onChange={(e) => setContactForm({...contactForm, email: e.target.value})}\n                        placeholder=\"your@email.com\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Subject *\n                    </label>\n                    <Input\n                      type=\"text\"\n                      required\n                      value={contactForm.subject}\n                      onChange={(e) => setContactForm({...contactForm, subject: e.target.value})}\n                      placeholder=\"Brief description of your issue\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Priority\n                    </label>\n                    <select\n                      value={contactForm.priority}\n                      onChange={(e) => setContactForm({...contactForm, priority: e.target.value})}\n                      className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    >\n                      <option value=\"low\">Low - General question</option>\n                      <option value=\"normal\">Normal - Need help</option>\n                      <option value=\"high\">High - Issue affecting work</option>\n                      <option value=\"urgent\">Urgent - Critical problem</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Message *\n                    </label>\n                    <textarea\n                      required\n                      rows={5}\n                      value={contactForm.message}\n                      onChange={(e) => setContactForm({...contactForm, message: e.target.value})}\n                      placeholder=\"Please describe your issue in detail...\"\n                      className=\"w-full p-3 border border-gray-300 rounded-md resize-none\"\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={submitLoading}\n                    className=\"w-full\"\n                  >\n                    {submitLoading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"w-4 h-4 mr-2\" />\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n                </form>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Contact Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Get in Touch</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"w-5 h-5 text-gray-400\" />\n                <div>\n                  <p className=\"font-medium\">Email Support</p>\n                  <p className=\"text-sm text-gray-600\">support@affilify.eu</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3\">\n                <Clock className=\"w-5 h-5 text-gray-400\" />\n                <div>\n                  <p className=\"font-medium\">Response Time</p>\n                  <p className=\"text-sm text-gray-600\">Within 24 hours</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3\">\n                <Zap className=\"w-5 h-5 text-gray-400\" />\n                <div>\n                  <p className=\"font-medium\">Priority Support</p>\n                  <p className=\"text-sm text-gray-600\">Pro & Enterprise plans</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle>System Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                <span className=\"text-sm font-medium\">All Systems Operational</span>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-3\">\n                All AFFILIFY services are running normally.\n              </p>\n              <Button \n                onClick={() => window.open('https://status.affilify.eu', '_blank')}\n                variant=\"outline\" \n                size=\"sm\"\n                className=\"w-full\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                View Status Page\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Resources */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Helpful Resources</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button \n                onClick={() => window.location.href = '/docs/getting-started'}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n              >\n                <Book className=\"w-4 h-4 mr-2\" />\n                Getting Started Guide\n              </Button>\n              \n              <Button \n                onClick={() => window.location.href = '/features'}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n              >\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Feature Overview\n              </Button>\n              \n              <Button \n                onClick={() => window.location.href = '/pricing'}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Pricing & Plans\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/layout.tsx",
    "content": "import DashboardLayout from '@/components/DashboardLayout'\n\nexport default function Layout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <DashboardLayout>{children}</DashboardLayout>\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/my-websites/page.tsx",
    "content": "import { MyWebsites } from '@/components/MyWebsites'\n\nexport default function MyWebsitesPage() {\n  return (\n    <div className=\"p-6\">\n      <MyWebsites />\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/page.tsx",
    "content": "'use client'\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\ninterface UserInfo {\n  id: string;\n  email: string;\n  name: string;\n  plan: string;\n  websiteCount: number;\n  createdAt: string;\n  lastLoginAt: string;\n}\n\ninterface Stats {\n  totalWebsiteGenerations: number;\n  totalClicks: number;\n  totalRevenue: number;\n  totalConversions: number;\n  conversionRate: string;\n}\n\nexport default function DashboardPage() {\n  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);\n  const [stats, setStats] = useState<Stats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  const fetchDashboardData = async () => {\n    try {\n      const response = await fetch('/api/dashboard/stats');\n      if (response.ok) {\n        const data = await response.json();\n        setUserInfo(data.user);\n        setStats(data.stats);\n      } else {\n        // Use mock data for demo\n        setUserInfo({\n          id: '1',\n          email: 'demo@affilify.com',\n          name: 'Demo User',\n          plan: 'Pro',\n          websiteCount: 5,\n          createdAt: '2024-01-01',\n          lastLoginAt: new Date().toISOString()\n        });\n        setStats({\n          totalWebsiteGenerations: 12,\n          totalClicks: 2847,\n          totalRevenue: 1250.75,\n          totalConversions: 89,\n          conversionRate: '3.1%'\n        });\n      }\n    } catch (error) {\n      console.error('Failed to fetch dashboard data:', error);\n      // Use mock data for demo\n      setUserInfo({\n        id: '1',\n        email: 'demo@affilify.com',\n        name: 'Demo User',\n        plan: 'Pro',\n        websiteCount: 5,\n        createdAt: '2024-01-01',\n        lastLoginAt: new Date().toISOString()\n      });\n      setStats({\n        totalWebsiteGenerations: 12,\n        totalClicks: 2847,\n        totalRevenue: 1250.75,\n        totalConversions: 89,\n        conversionRate: '3.1%'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 flex items-center justify-center\">\n        <div className=\"text-gray-900 text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900\">\n      {/* Navbar */}\n      <nav className=\"bg-slate-900 border-b border-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center\">\n              <Link href=\"/\" className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-orange-600 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-gray-900 font-bold text-lg\">⚡</span>\n                </div>\n                <span className=\"text-gray-900 text-xl font-bold\">AFFILIFY</span>\n              </Link>\n            </div>\n\n            {/* User Info */}\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-gray-700\">Welcome, {userInfo?.name}</span>\n              <span className=\"bg-orange-600 text-gray-900 px-3 py-1 rounded-full text-sm\">{userInfo?.plan} Plan</span>\n              <Link href=\"/api/auth/logout\" className=\"text-gray-700 hover:text-gray-900\">\n                Logout\n              </Link>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            <span className=\"bg-gradient-to-r from-orange-400 via-red-500 to-pink-500 bg-clip-text text-transparent\">\n              Your Affiliate Dashboard\n            </span>\n          </h1>\n          <p className=\"text-xl text-gray-800 max-w-2xl mx-auto\">\n            Manage your{' '}\n            <span className=\"text-blue-400 font-semibold\">AI-powered websites</span> and track your{' '}\n            <span className=\"text-green-400 font-semibold\">performance metrics</span>\n          </p>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-6 border border-white border-opacity-30 text-center\">\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">{stats?.totalWebsiteGenerations}</div>\n            <div className=\"text-gray-700\">Websites Created</div>\n          </div>\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-6 border border-white border-opacity-30 text-center\">\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">{stats?.totalClicks?.toLocaleString() || \"0\"}</div>\n            <div className=\"text-gray-700\">Total Clicks</div>\n          </div>\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-6 border border-white border-opacity-30 text-center\">\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">${(stats?.totalRevenue?.toFixed(2) || \"00.00\")}</div>\n            <div className=\"text-gray-700\">Revenue Generated</div>\n          </div>\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-6 border border-white border-opacity-30 text-center\">\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">{stats?.conversionRate}</div>\n            <div className=\"text-gray-700\">Conversion Rate</div>\n          </div>\n        </div>\n\n        {/* Action Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n          {/* Create Website */}\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-8 border border-white border-opacity-30 text-center\">\n            <div className=\"w-16 h-16 bg-orange-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <span className=\"text-2xl\">🚀</span>\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Create New Website</h3>\n            <p className=\"text-gray-700 mb-6\">\n              Generate a professional affiliate website with AI-powered content and design.\n            </p>\n            <Link href=\"/dashboard/create-website\">\n              <button className=\"bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-gray-900 font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-110\">\n                Create Website\n              </button>\n            </Link>\n          </div>\n\n          {/* Analyze Website */}\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-8 border border-white border-opacity-30 text-center\">\n            <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <span className=\"text-2xl\">📊</span>\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Analyze Website</h3>\n            <p className=\"text-gray-700 mb-6\">\n              Get detailed insights and optimization recommendations for any website.\n            </p>\n            <Link href=\"/dashboard/analyze-website\">\n              <button className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-gray-900 font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-110\">\n                Analyze Website\n              </button>\n            </Link>\n          </div>\n\n          {/* My Websites */}\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-8 border border-white border-opacity-30 text-center\">\n            <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <span className=\"text-2xl\">🌐</span>\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-4\">My Websites</h3>\n            <p className=\"text-gray-700 mb-6\">\n              View and manage all your created affiliate websites in one place.\n            </p>\n            <Link href=\"/dashboard/my-websites\">\n              <button className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-gray-900 font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-110\">\n                View Websites\n              </button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Plan-specific Features */}\n        {userInfo?.plan !== 'Basic' && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold text-gray-900 text-center mb-8\">Advanced Features</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Link href=\"/dashboard/advanced-analytics\" className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-xl p-6 border border-white border-opacity-30 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-15 transition-all\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-2\">📈 Advanced Analytics</h3>\n                <p className=\"text-gray-700 text-sm\">Deep insights into your website performance</p>\n              </Link>\n              <Link href=\"/dashboard/reviews\" className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-xl p-6 border border-white border-opacity-30 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-15 transition-all\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-2\">⭐ Reviews Management</h3>\n                <p className=\"text-gray-700 text-sm\">Manage and display customer reviews</p>\n              </Link>\n              <Link href=\"/dashboard/ab-testing\" className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-xl p-6 border border-white border-opacity-30 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-15 transition-all\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-2\">🧪 A/B Testing</h3>\n                <p className=\"text-gray-700 text-sm\">Optimize your conversion rates</p>\n              </Link>\n            </div>\n          </div>\n        )}\n\n        {/* Upgrade CTA for Basic Plan */}\n        {userInfo?.plan === 'Basic' && (\n          <div className=\"text-center\">\n            <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 backdrop-blur-xl rounded-2xl p-8 border border-white border-opacity-30 max-w-2xl mx-auto\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Unlock More Features</h2>\n              <p className=\"text-gray-700 mb-6\">\n                Upgrade to Pro or Enterprise to access advanced analytics, A/B testing, and more!\n              </p>\n              <Link href=\"/pricing\">\n                <button className=\"bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-gray-900 font-bold py-3 px-8 rounded-lg transition-all duration-300 transform hover:scale-110\">\n                  Upgrade Now\n                </button>\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/pro/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Globe, \n  BarChart3, \n  Crown,\n  Plus,\n  Settings,\n  TrendingUp,\n  Users,\n  Eye,\n  MousePointer,\n  TestTube,\n  MessageSquare,\n  Zap\n} from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function ProDashboard() {\n  const [stats, setStats] = useState({\n    websites: 4,\n    maxWebsites: 10,\n    totalViews: 15847,\n    totalClicks: 1289,\n    conversionRate: 8.1,\n    revenue: 2847\n  })\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Pro Dashboard</h1>\n            <p className=\"text-gray-700\">Advanced affiliate marketing management</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"secondary\" className=\"bg-purple-600 text-gray-900\">\n              <Crown className=\"w-3 h-3 mr-1\" />\n              Pro Plan\n            </Badge>\n            <Button asChild className=\"bg-blue-600 hover:bg-blue-700\">\n              <Link href=\"/pricing\">\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Upgrade to Enterprise\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Websites</CardTitle>\n              <Globe className=\"h-4 w-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.websites}/{stats.maxWebsites}</div>\n              <p className=\"text-xs text-gray-400\">\n                {stats.maxWebsites - stats.websites} remaining\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Total Views</CardTitle>\n              <Eye className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalViews?.toLocaleString() || \"0\"}</div>\n              <p className=\"text-xs text-gray-400\">\n                +18% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Total Clicks</CardTitle>\n              <MousePointer className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalClicks}</div>\n              <p className=\"text-xs text-gray-400\">\n                +15% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Conversion Rate</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-orange-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.conversionRate}%</div>\n              <p className=\"text-xs text-gray-400\">\n                +1.2% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-900\">Revenue</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">${stats.revenue}</div>\n              <p className=\"text-xs text-gray-400\">\n                +22% from last month\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Quick Actions</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Pro-level website management\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button asChild className=\"w-full bg-purple-600 hover:bg-purple-700\">\n                <Link href=\"/dashboard/create-website/pro\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create New Website\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/my-websites\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  Manage Websites\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/advanced-analytics\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Advanced Analytics\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Pro Features</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Advanced tools at your disposal\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/ab-testing\">\n                  <TestTube className=\"w-4 h-4 mr-2\" />\n                  A/B Testing\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/analyze-website\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Website Analysis\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full border-white border-opacity-30 text-gray-900 hover:bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20\">\n                <Link href=\"/dashboard/reviews\">\n                  <MessageSquare className=\"w-4 h-4 mr-2\" />\n                  Reviews Management\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Enterprise Benefits</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Unlock unlimited potential\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center text-gray-700\">\n                <Globe className=\"w-4 h-4 mr-2 text-blue-400\" />\n                <span>Unlimited websites</span>\n              </div>\n              <div className=\"flex items-center text-gray-700\">\n                <Users className=\"w-4 h-4 mr-2 text-green-400\" />\n                <span>Team collaboration</span>\n              </div>\n              <div className=\"flex items-center text-gray-700\">\n                <Zap className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                <span>API access</span>\n              </div>\n              <div className=\"flex items-center text-gray-700\">\n                <Settings className=\"w-4 h-4 mr-2 text-purple-400\" />\n                <span>White-label options</span>\n              </div>\n              <Button asChild className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 mt-4\">\n                <Link href=\"/pricing\">\n                  Upgrade to Enterprise - $99/month\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity & Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Recent Activity</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                Your latest affiliate marketing activities\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Globe className=\"w-5 h-5 text-purple-400\" />\n                    <div>\n                      <p className=\"text-gray-900 font-medium\">Gaming Laptop Review</p>\n                      <p className=\"text-gray-400 text-sm\">Created 1 day ago</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-green-600 text-gray-900\">Active</Badge>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <TestTube className=\"w-5 h-5 text-blue-400\" />\n                    <div>\n                      <p className=\"text-gray-900 font-medium\">A/B Test: CTA Button</p>\n                      <p className=\"text-gray-400 text-sm\">Started 3 days ago</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-orange-600 text-gray-900\">Running</Badge>\n                </div>\n\n                <div className=\"flex items-center justify-between p-3 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-5 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                    <div>\n                      <p className=\"text-gray-900 font-medium\">Analytics Report</p>\n                      <p className=\"text-gray-400 text-sm\">Generated 1 week ago</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"bg-blue-600 text-gray-900\">Completed</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 bg-opacity-20 border-white border-opacity-30\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900\">Performance Insights</CardTitle>\n              <CardDescription className=\"text-gray-700\">\n                AI-powered recommendations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-green-600/20 border border-green-600/30 rounded-lg\">\n                  <h4 className=\"text-green-400 font-medium mb-2\">🎯 Optimization Tip</h4>\n                  <p className=\"text-gray-700 text-sm\">Your \"Gaming Laptop\" page has 15% higher conversion. Consider creating similar content.</p>\n                </div>\n                \n                <div className=\"p-4 bg-blue-600/20 border border-blue-600/30 rounded-lg\">\n                  <h4 className=\"text-blue-400 font-medium mb-2\">📊 Traffic Insight</h4>\n                  <p className=\"text-gray-700 text-sm\">Mobile traffic increased 28% this month. Optimize for mobile experience.</p>\n                </div>\n\n                <div className=\"p-4 bg-purple-600/20 border border-purple-600/30 rounded-lg\">\n                  <h4 className=\"text-purple-400 font-medium mb-2\">🚀 Growth Opportunity</h4>\n                  <p className=\"text-gray-700 text-sm\">You're using 4/10 websites. Create 2 more to maximize your Pro plan benefits.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/reviews/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  Star, \n  Plus, \n  Edit, \n  Trash2, \n  Eye, \n  EyeOff, \n  Search, \n  Filter,\n  Download,\n  Upload,\n  BarChart3,\n  TrendingUp,\n  Users,\n  MessageSquare,\n  CheckCircle,\n  AlertCircle,\n  Crown,\n  Sparkles\n} from 'lucide-react'\n\ninterface Review {\n  id: string\n  customerName: string\n  customerEmail: string\n  customerAvatar?: string\n  rating: number\n  title: string\n  content: string\n  productId: string\n  productName: string\n  websiteId: string\n  websiteName: string\n  status: 'pending' | 'approved' | 'rejected'\n  isVisible: boolean\n  isFeatured: boolean\n  createdAt: string\n  updatedAt: string\n  source: 'manual' | 'import' | 'api' | 'widget'\n  metadata: {\n    location?: string\n    verified: boolean\n    helpfulVotes: number\n    reportedCount: number\n  }\n}\n\ninterface ReviewStats {\n  total: number\n  approved: number\n  pending: number\n  rejected: number\n  averageRating: number\n  ratingDistribution: Record<number, number>\n  monthlyTrend: Array<{ month: string; count: number; rating: number }>\n}\n\nexport default function ReviewsPage() {\n  const [reviews, setReviews] = useState<Review[]>([])\n  const [stats, setStats] = useState<ReviewStats | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState<'all' | 'pending' | 'approved' | 'rejected'>('all')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedReviews, setSelectedReviews] = useState<string[]>([])\n  const [showAddModal, setShowAddModal] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n\n  // Temporarily remove Enterprise plan restriction for testing\n  const [hasEnterpriseAccess, setHasEnterpriseAccess] = useState(true)\n\n  useEffect(() => {\n    // checkEnterpriseAccess()\n    // if (hasEnterpriseAccess) {\n      loadReviews()\n      loadStats()\n    // }\n  }, [])\n\n  const checkEnterpriseAccess = async () => {\n    try {\n      const response = await fetch('/api/auth/me')\n      if (response.ok) {\n        const data = await response.json()\n        // setHasEnterpriseAccess(data.user.plan === 'enterprise')\n        setHasEnterpriseAccess(true) // Temporarily allow access for testing\n      }\n    } catch (error) {\n      console.error('Error checking access:', error)\n    }\n  }\n\n  const loadReviews = async () => {\n    try {\n      const response = await fetch('/api/reviews')\n      if (response.ok) {\n        const data = await response.json()\n        setReviews(data.reviews)\n      }\n    } catch (error) {\n      console.error('Error loading reviews:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadStats = async () => {\n    try {\n      const response = await fetch('/api/reviews/stats')\n      if (response.ok) {\n        const data = await response.json()\n        setStats(data.stats)\n      }\n    } catch (error) {\n      console.error('Error loading stats:', error)\n    }\n  }\n\n  const handleApprove = async (reviewIds: string[]) => {\n    try {\n      const response = await fetch('/api/reviews/bulk-update', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reviewIds, status: 'approved' })\n      })\n\n      if (response.ok) {\n        setSuccess(`${reviewIds.length} review(s) approved`)\n        await loadReviews()\n        await loadStats()\n        setSelectedReviews([])\n      }\n    } catch (error) {\n      setError('Failed to approve reviews')\n    }\n  }\n\n  const handleReject = async (reviewIds: string[]) => {\n    try {\n      const response = await fetch('/api/reviews/bulk-update', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reviewIds, status: 'rejected' })\n      })\n\n      if (response.ok) {\n        setSuccess(`${reviewIds.length} review(s) rejected`)\n        await loadReviews()\n        await loadStats()\n        setSelectedReviews([])\n      }\n    } catch (error) {\n      setError('Failed to reject reviews')\n    }\n  }\n\n  const toggleVisibility = async (reviewId: string, isVisible: boolean) => {\n    try {\n      const response = await fetch(`/api/reviews/${reviewId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isVisible })\n      })\n\n      if (response.ok) {\n        await loadReviews()\n      }\n    } catch (error) {\n      setError('Failed to update visibility')\n    }\n  }\n\n  const toggleFeatured = async (reviewId: string, isFeatured: boolean) => {\n    try {\n      const response = await fetch(`/api/reviews/${reviewId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isFeatured })\n      })\n\n      if (response.ok) {\n        await loadReviews()\n      }\n    } catch (error) {\n      setError('Failed to update featured status')\n    }\n  }\n\n  const exportReviews = async () => {\n    try {\n      const response = await fetch('/api/reviews/export')\n      const blob = await response.blob()\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = `reviews-${new Date().toISOString().split('T')[0]}.csv`\n      a.click()\n    } catch (error) {\n      setError('Failed to export reviews')\n    }\n  }\n\n  const filteredReviews = reviews.filter(review => {\n    const matchesFilter = filter === 'all' || review.status === filter\n    const matchesSearch = review.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         review.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         review.productName.toLowerCase().includes(searchTerm.toLowerCase())\n    return matchesFilter && matchesSearch\n  })\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800'\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'rejected':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 text-gray-800'\n    }\n  }\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${i < rating ? 'text-yellow-400 fill-current' : 'text-gray-700'}`}\n      />\n    ))\n  }\n\n  // Enterprise access gate\n  if (!hasEnterpriseAccess) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"max-w-2xl mx-auto text-center py-12\">\n          <div className=\"w-16 h-16 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Crown className=\"w-8 h-8 text-gray-900\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Enterprise Feature</h1>\n          <p className=\"text-gray-600 mb-6\">\n            The Reviews Management System is available exclusively for Enterprise plan users. \n            Upgrade your plan to access advanced review collection, moderation, and analytics features.\n          </p>\n          <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-6 mb-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">Enterprise Reviews Features:</h3>\n            <ul className=\"text-left text-gray-700 space-y-2\">\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Advanced review collection widgets</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Automated review moderation</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Review analytics and insights</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Bulk import/export capabilities</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> Custom review templates</li>\n              <li className=\"flex items-center\"><Sparkles className=\"w-4 h-4 mr-2 text-purple-600\" /> API access for integrations</li>\n            </ul>\n          </div>\n          <Button size=\"lg\" variant=\"gradient\">\n            <Crown className=\"w-4 h-4 mr-2\" />\n            Upgrade to Enterprise\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Reviews Management</h1>\n            <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-gray-900 px-2 py-1 rounded-full text-xs font-medium flex items-center\">\n              <Crown className=\"w-3 h-3 mr-1\" />\n              Enterprise\n            </div>\n          </div>\n          <p className=\"text-gray-600\">Manage customer reviews and testimonials</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={exportReviews}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n          <Button onClick={() => setShowAddModal(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Review\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Reviews</CardTitle>\n              <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.total}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats.approved} approved, {stats.pending} pending\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Average Rating</CardTitle>\n              <Star className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(stats?.averageRating?.toFixed(1) || \"0.0\")}</div>\n              <div className=\"flex items-center mt-1\">\n                {renderStars(Math.round(stats.averageRating))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Approval Rate</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {(stats?.total > 0 ? ((stats?.approved / stats?.total) * 100)?.toFixed(1) : '0') || '0'}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats.rejected} rejected\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">This Month</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {stats.monthlyTrend[stats.monthlyTrend.length - 1]?.count || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                New reviews\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters and Actions */}\n      <div className=\"flex flex-col sm:flex-row justify-between gap-4\">\n        <div className=\"flex gap-2\">\n          {(['all', 'pending', 'approved', 'rejected'] as const).map((status) => (\n            <Button\n              key={status}\n              variant={filter === status ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter(status)}\n            >\n              {status.charAt(0).toUpperCase() + status.slice(1)}\n            </Button>\n          ))}\n        </div>\n\n        <div className=\"flex gap-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search reviews...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Bulk Actions */}\n      {selectedReviews.length > 0 && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-blue-700\">\n              {selectedReviews.length} review(s) selected\n            </span>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleApprove(selectedReviews)}\n              >\n                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                Approve\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleReject(selectedReviews)}\n              >\n                <AlertCircle className=\"w-4 h-4 mr-1\" />\n                Reject\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Reviews List */}\n      <div className=\"space-y-4\">\n        {filteredReviews.map((review) => (\n          <Card key={review.id}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedReviews.includes(review.id)}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      setSelectedReviews([...selectedReviews, review.id])\n                    } else {\n                      setSelectedReviews(selectedReviews.filter(id => id !== review.id))\n                    }\n                  }}\n                  className=\"mt-1\"\n                />\n                \n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"font-semibold\">{review.customerName}</h3>\n                        {review.metadata.verified && (\n                          <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <div className=\"flex\">{renderStars(review.rating)}</div>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(review.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <div className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(review.status)}`}>\n                        {review.status}\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleVisibility(review.id, !review.isVisible)}\n                      >\n                        {review.isVisible ? <Eye className=\"w-4 h-4\" /> : <EyeOff className=\"w-4 h-4\" />}\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleFeatured(review.id, !review.isFeatured)}\n                      >\n                        <Star className={`w-4 h-4 ${review.isFeatured ? 'text-yellow-400 fill-current' : 'text-gray-400'}`} />\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {review.title && (\n                    <h4 className=\"font-medium mb-2\">{review.title}</h4>\n                  )}\n                  \n                  <p className=\"text-gray-700 mb-3\">{review.content}</p>\n                  \n                  <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                    <div className=\"flex items-center gap-4\">\n                      <span>Product: {review.productName}</span>\n                      <span>Website: {review.websiteName}</span>\n                      <span>Source: {review.source}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      {review.metadata.helpfulVotes > 0 && (\n                        <span>{review.metadata.helpfulVotes} helpful</span>\n                      )}\n                      {review.status === 'pending' && (\n                        <div className=\"flex gap-1\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleApprove([review.id])}\n                          >\n                            Approve\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleReject([review.id])}\n                          >\n                            Reject\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredReviews.length === 0 && (\n        <div className=\"text-center py-12\">\n          <MessageSquare className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No reviews found</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            {reviews.length === 0 \n              ? 'Start collecting reviews from your customers.' \n              : 'Try adjusting your search or filter criteria.'\n            }\n          </p>\n        </div>\n      )}\n\n      {/* Add Review Modal */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-gradient-to-br from-orange-900 via-orange-800 to-red-900 rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-xl font-bold\">Add Customer Review</h2>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowAddModal(false)}\n              >\n                ×\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Customer Name</label>\n                  <Input placeholder=\"John Smith\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Customer Email</label>\n                  <Input type=\"email\" placeholder=\"john@example.com\" />\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Review Title</label>\n                <Input placeholder=\"Great product, highly recommend!\" />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Review Content</label>\n                <textarea \n                  className=\"w-full p-3 border rounded-md h-32 resize-none\"\n                  placeholder=\"Write the detailed review content here...\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Rating</label>\n                <div className=\"flex gap-1\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <Star\n                      key={star}\n                      className=\"w-6 h-6 cursor-pointer text-yellow-400 fill-current\"\n                    />\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Product/Website</label>\n                <select className=\"w-full p-2 border rounded-md\">\n                  <option value=\"\">Select a website</option>\n                  <option value=\"website1\">Tech Product Review Site</option>\n                  <option value=\"website2\">Affiliate Marketing Blog</option>\n                </select>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <input type=\"checkbox\" id=\"verified\" className=\"rounded\" />\n                  <label htmlFor=\"verified\" className=\"text-sm\">Verified Purchase</label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <input type=\"checkbox\" id=\"featured\" className=\"rounded\" />\n                  <label htmlFor=\"featured\" className=\"text-sm\">Featured Review</label>\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Status</label>\n                <select className=\"w-full p-2 border rounded-md\">\n                  <option value=\"pending\">Pending Review</option>\n                  <option value=\"approved\">Approved</option>\n                  <option value=\"rejected\">Rejected</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-3 mt-6\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowAddModal(false)}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  setShowAddModal(false)\n                  setSuccess('Review added successfully! It will appear in your reviews list.')\n                }}\n                className=\"flex-1\"\n              >\n                Add Review\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Success/Error Messages */}\n      {success && (\n        <div className=\"fixed bottom-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50\">\n          <div className=\"flex items-center\">\n            <CheckCircle className=\"w-4 h-4 mr-2\" />\n            {success}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSuccess('')}\n              className=\"ml-2 p-1\"\n            >\n              ×\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"fixed bottom-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50\">\n          <div className=\"flex items-center\">\n            <AlertCircle className=\"w-4 h-4 mr-2\" />\n            {error}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setError('')}\n              className=\"ml-2 p-1\"\n            >\n              ×\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.580Z"
  },
  {
    "path": "src/app/dashboard/settings/page.tsx",
    "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { \n  User, \n  Mail, \n  Lock, \n  Bell, \n  Shield, \n  Trash2,\n  Save,\n  AlertCircle,\n  CheckCircle,\n  Loader2,\n  Crown,\n  CreditCard,\n  Globe,\n  Eye,\n  EyeOff\n} from 'lucide-react'\n\ninterface UserSettings {\n  id: string\n  name: string\n  email: string\n  plan: 'basic' | 'pro' | 'enterprise'\n  websitesCreated: number\n  websiteLimit: number\n  analysesUsed: number\n  analysisLimit: number\n  createdAt: string\n  isVerified: boolean\n}\n\nexport default function SettingsPage() {\n  const [user, setUser] = useState<UserSettings | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [showPassword, setShowPassword] = useState(false)\n  \n  // Form states\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [currentPassword, setCurrentPassword] = useState('')\n  const [newPassword, setNewPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  \n  // Notification settings\n  const [emailNotifications, setEmailNotifications] = useState(true)\n  const [marketingEmails, setMarketingEmails] = useState(false)\n\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n  const loadUserData = async () => {\n    try {\n      const response = await fetch('/api/auth/me')\n      if (response.ok) {\n        const data = await response.json()\n        setUser(data.user)\n        setName(data.user.name)\n        setEmail(data.user.email)\n      } else {\n        setError('Failed to load user data')\n      }\n    } catch (error) {\n      console.error('Error loading user data:', error)\n      setError('An error occurred while loading your settings')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleUpdateProfile = async () => {\n    setSaving(true)\n    setError('')\n    setSuccess('')\n\n    try {\n      const response = await fetch('/api/user/update-profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: name.trim(),\n          email: email.trim(),\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setSuccess('Profile updated successfully!')\n        await loadUserData()\n      } else {\n        setError(data.message || 'Failed to update profile')\n      }\n    } catch (error) {\n      console.error('Profile update error:', error)\n      setError('An error occurred while updating your profile')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handleChangePassword = async () => {\n    if (newPassword !== confirmPassword) {\n      setError('New passwords do not match')\n      return\n    }\n\n    if (newPassword.length < 8) {\n      setError('New password must be at least 8 characters long')\n      return\n    }\n\n    setSaving(true)\n    setError('')\n    setSuccess('')\n\n    try {\n      const response = await fetch('/api/user/change-password', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          currentPassword,\n          newPassword,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setSuccess('Password changed successfully!')\n        setCurrentPassword('')\n        setNewPassword('')\n        setConfirmPassword('')\n      } else {\n        setError(data.message || 'Failed to change password')\n      }\n    } catch (error) {\n      console.error('Password change error:', error)\n      setError('An error occurred while changing your password')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const getPlanName = (plan: string) => {\n    switch (plan) {\n      case 'basic':\n        return 'Basic (FREE)'\n      case 'pro':\n        return 'Pro ($29/month)'\n      case 'enterprise':\n        return 'Enterprise ($99/month)'\n      default:\n        return plan\n    }\n  }\n\n  const getPlanColor = (plan: string) => {\n    switch (plan) {\n      case 'basic':\n        return 'text-gray-600 bg-gray-100'\n      case 'pro':\n        return 'text-purple-600 bg-purple-100'\n      case 'enterprise':\n        return 'text-blue-600 bg-blue-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Account Settings</h1>\n        <p className=\"text-gray-600\">Manage your account preferences and security settings</p>\n      </div>\n\n      {/* Error/Success Messages */}\n      {error && (\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg flex items-center\">\n          <AlertCircle className=\"w-5 h-5 text-red-600 mr-3\" />\n          <span className=\"text-red-700\">{error}</span>\n        </div>\n      )}\n\n      {success && (\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg flex items-center\">\n          <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n          <span className=\"text-green-700\">{success}</span>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Settings */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Profile Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Profile Information\n              </CardTitle>\n              <CardDescription>\n                Update your personal information and account details\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Full Name\n                  </label>\n                  <Input\n                    type=\"text\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    placeholder=\"Enter your full name\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email Address\n                  </label>\n                  <Input\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    placeholder=\"Enter your email\"\n                  />\n                </div>\n              </div>\n              \n              <Button \n                onClick={handleUpdateProfile}\n                disabled={saving}\n                className=\"w-full md:w-auto\"\n              >\n                {saving ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Changes\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Change Password */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Lock className=\"w-5 h-5\" />\n                Change Password\n              </CardTitle>\n              <CardDescription>\n                Update your password to keep your account secure\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Current Password\n                </label>\n                <div className=\"relative\">\n                  <Input\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={currentPassword}\n                    onChange={(e) => setCurrentPassword(e.target.value)}\n                    placeholder=\"Enter your current password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    New Password\n                  </label>\n                  <Input\n                    type=\"password\"\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    placeholder=\"Enter new password\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Confirm New Password\n                  </label>\n                  <Input\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    placeholder=\"Confirm new password\"\n                  />\n                </div>\n              </div>\n              \n              <Button \n                onClick={handleChangePassword}\n                disabled={saving || !currentPassword || !newPassword || !confirmPassword}\n                className=\"w-full md:w-auto\"\n              >\n                {saving ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Changing...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Change Password\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Notification Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"w-5 h-5\" />\n                Notification Preferences\n              </CardTitle>\n              <CardDescription>\n                Choose how you want to receive notifications\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Email Notifications</h4>\n                  <p className=\"text-sm text-gray-600\">Receive important updates via email</p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={emailNotifications}\n                  onChange={(e) => setEmailNotifications(e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Marketing Emails</h4>\n                  <p className=\"text-sm text-gray-600\">Receive tips, updates, and promotional content</p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={marketingEmails}\n                  onChange={(e) => setMarketingEmails(e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Account Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Account Overview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Plan</span>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPlanColor(user?.plan || 'basic')}`}>\n                  {getPlanName(user?.plan || 'basic')}\n                </span>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Websites</span>\n                <span className=\"text-sm font-medium\">\n                  {user?.websitesCreated || 0} / {user?.websiteLimit === -1 ? '∞' : user?.websiteLimit || 0}\n                </span>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Analyses</span>\n                <span className=\"text-sm font-medium\">\n                  {user?.analysesUsed || 0} / {user?.analysisLimit === -1 ? '∞' : user?.analysisLimit || 0}\n                </span>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Member Since</span>\n                <span className=\"text-sm font-medium\">\n                  {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button \n                onClick={() => window.location.href = '/dashboard/billing'}\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n              >\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Manage Billing\n              </Button>\n              \n              <Button \n                onClick={() => window.location.href = '/dashboard/my-websites'}\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n              >\n                <Globe className=\"w-4 h-4 mr-2\" />\n                My Websites\n              </Button>\n              \n              <Button \n                onClick={() => window.location.href = '/dashboard/help'}\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n              >\n                <AlertCircle className=\"w-4 h-4 mr-2\" />\n                Get Help\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Upgrade */}\n          {user?.plan === 'basic' && (\n            <Card className=\"border-purple-200 bg-purple-50\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                  <Crown className=\"w-5 h-5\" />\n                  Upgrade Your Plan\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-purple-700 mb-4\">\n                  Unlock more websites, advanced features, and premium support.\n                </p>\n                <Button \n                  onClick={() => window.location.href = '/pricing'}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  View Plans\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.581Z"
  },
  {
    "path": "src/app/dashboard/team-collaboration/page.tsx",
    "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Users, Plus, Settings, MessageSquare, Calendar, FileText, UserPlus, Crown, Shield, Eye, Edit, Trash2, Clock, CheckCircle } from 'lucide-react';\n\ninterface TeamMember {\n  id: string;\n  name: string;\n  email: string;\n  role: 'owner' | 'admin' | 'editor' | 'viewer';\n  avatar: string;\n  status: 'active' | 'pending' | 'inactive';\n  lastActive: Date;\n  joinedDate: Date;\n  permissions: string[];\n}\n\ninterface Project {\n  id: string;\n  name: string;\n  description: string;\n  status: 'active' | 'completed' | 'on-hold';\n  progress: number;\n  assignedTo: string[];\n  dueDate: Date;\n  createdDate: Date;\n}\n\ninterface Activity {\n  id: string;\n  user: string;\n  action: string;\n  target: string;\n  timestamp: Date;\n  type: 'create' | 'edit' | 'delete' | 'comment' | 'assign';\n}\n\nexport default function TeamCollaborationPage() {\n  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [activeTab, setActiveTab] = useState<'members' | 'projects' | 'activity' | 'permissions'>('members');\n  const [showInviteModal, setShowInviteModal] = useState(false);\n\n  useEffect(() => {\n    loadTeamData();\n  }, []);\n\n  const loadTeamData = () => {\n    // Mock team members\n    const mockMembers: TeamMember[] = [\n      {\n        id: '1',\n        name: 'John Doe',\n        email: 'john@affilify.eu',\n        role: 'owner',\n        avatar: '/avatars/john.jpg',\n        status: 'active',\n        lastActive: new Date(),\n        joinedDate: new Date(Date.now() - 86400000 * 30),\n        permissions: ['all'],\n      },\n      {\n        id: '2',\n        name: 'Sarah Wilson',\n        email: 'sarah@affilify.eu',\n        role: 'admin',\n        avatar: '/avatars/sarah.jpg',\n        status: 'active',\n        lastActive: new Date(Date.now() - 3600000),\n        joinedDate: new Date(Date.now() - 86400000 * 15),\n        permissions: ['manage_websites', 'manage_analytics', 'manage_team'],\n      },\n      {\n        id: '3',\n        name: 'Mike Johnson',\n        email: 'mike@affilify.eu',\n        role: 'editor',\n        avatar: '/avatars/mike.jpg',\n        status: 'active',\n        lastActive: new Date(Date.now() - 7200000),\n        joinedDate: new Date(Date.now() - 86400000 * 7),\n        permissions: ['create_websites', 'edit_content', 'view_analytics'],\n      },\n      {\n        id: '4',\n        name: 'Emma Davis',\n        email: 'emma@affilify.eu',\n        role: 'viewer',\n        avatar: '/avatars/emma.jpg',\n        status: 'pending',\n        lastActive: new Date(Date.now() - 86400000),\n        joinedDate: new Date(Date.now() - 86400000 * 2),\n        permissions: ['view_websites', 'view_analytics'],\n      },\n    ];\n\n    // Mock projects\n    const mockProjects: Project[] = [\n      {\n        id: '1',\n        name: 'Q1 Website Optimization',\n        description: 'Optimize conversion rates for top-performing affiliate sites',\n        status: 'active',\n        progress: 65,\n        assignedTo: ['2', '3'],\n        dueDate: new Date(Date.now() + 86400000 * 14),\n        createdDate: new Date(Date.now() - 86400000 * 10),\n      },\n      {\n        id: '2',\n        name: 'New Product Launch Campaign',\n        description: 'Create affiliate sites for upcoming product launches',\n        status: 'active',\n        progress: 30,\n        assignedTo: ['1', '2', '3'],\n        dueDate: new Date(Date.now() + 86400000 * 21),\n        createdDate: new Date(Date.now() - 86400000 * 5),\n      },\n      {\n        id: '3',\n        name: 'Analytics Dashboard Redesign',\n        description: 'Improve user experience for analytics dashboard',\n        status: 'completed',\n        progress: 100,\n        assignedTo: ['2'],\n        dueDate: new Date(Date.now() - 86400000 * 3),\n        createdDate: new Date(Date.now() - 86400000 * 20),\n      },\n    ];\n\n    // Mock activities\n    const mockActivities: Activity[] = [\n      {\n        id: '1',\n        user: 'Sarah Wilson',\n        action: 'created',\n        target: 'Tech Gadgets Website',\n        timestamp: new Date(Date.now() - 3600000),\n        type: 'create',\n      },\n      {\n        id: '2',\n        user: 'Mike Johnson',\n        action: 'updated',\n        target: 'Q1 Website Optimization',\n        timestamp: new Date(Date.now() - 7200000),\n        type: 'edit',\n      },\n      {\n        id: '3',\n        user: 'John Doe',\n        action: 'assigned',\n        target: 'New Product Launch Campaign to Sarah Wilson',\n        timestamp: new Date(Date.now() - 10800000),\n        type: 'assign',\n      },\n      {\n        id: '4',\n        user: 'Sarah Wilson',\n        action: 'commented on',\n        target: 'Analytics Dashboard Redesign',\n        timestamp: new Date(Date.now() - 14400000),\n        type: 'comment',\n      },\n    ];\n\n    setTeamMembers(mockMembers);\n    setProjects(mockProjects);\n    setActivities(mockActivities);\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'owner': return <Crown className=\"h-4 w-4 text-yellow-600\" />;\n      case 'admin': return <Shield className=\"h-4 w-4 text-blue-600\" />;\n      case 'editor': return <Edit className=\"h-4 w-4 text-green-600\" />;\n      case 'viewer': return <Eye className=\"h-4 w-4 text-gray-600\" />;\n      default: return <Users className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'pending': return 'text-orange-600 bg-orange-100';\n      case 'inactive': return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  const getProjectStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-blue-600 bg-blue-100';\n      case 'completed': return 'text-green-600 bg-green-100';\n      case 'on-hold': return 'text-orange-600 bg-orange-100';\n      default: return 'text-gray-600 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900';\n    }\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'create': return <Plus className=\"h-4 w-4 text-green-600\" />;\n      case 'edit': return <Edit className=\"h-4 w-4 text-blue-600\" />;\n      case 'delete': return <Trash2 className=\"h-4 w-4 text-red-600\" />;\n      case 'comment': return <MessageSquare className=\"h-4 w-4 text-purple-600\" />;\n      case 'assign': return <UserPlus className=\"h-4 w-4 text-orange-600\" />;\n      default: return <Clock className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center\">\n            <Users className=\"h-8 w-8 mr-3 text-blue-600\" />\n            Team Collaboration\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Manage your team and collaborate on affiliate marketing projects</p>\n        </div>\n        <Button onClick={() => setShowInviteModal(true)}>\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Invite Member\n        </Button>\n      </div>\n\n      {/* Team Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{teamMembers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {teamMembers.filter(m => m.status === 'active').length} active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Projects</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{projects.filter(p => p.status === 'active').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {projects.filter(p => p.status === 'completed').length} completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">This Week's Activity</CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">47</div>\n            <p className=\"text-xs text-muted-foreground\">+12% from last week</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg. Response Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">2.4h</div>\n            <p className=\"text-xs text-muted-foreground\">-15% from last week</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b\">\n        <nav className=\"flex space-x-8\">\n          {[\n            { id: 'members', label: 'Team Members', icon: Users },\n            { id: 'projects', label: 'Projects', icon: FileText },\n            { id: 'activity', label: 'Activity', icon: MessageSquare },\n            { id: 'permissions', label: 'Permissions', icon: Settings },\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Team Members Tab */}\n      {activeTab === 'members' && (\n        <div className=\"space-y-4\">\n          {teamMembers.map((member) => (\n            <Card key={member.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center\">\n                      <Users className=\"h-6 w-6 text-gray-600\" />\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold\">{member.name}</h3>\n                        {getRoleIcon(member.role)}\n                        <span className=\"text-sm text-gray-600 capitalize\">{member.role}</span>\n                      </div>\n                      <p className=\"text-sm text-gray-600\">{member.email}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        Last active: {member.lastActive.toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(member.status)}`}>\n                      {member.status.charAt(0).toUpperCase() + member.status.slice(1)}\n                    </span>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                      {member.role !== 'owner' && (\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>Permissions:</strong> {member.permissions.join(', ')}\n                  </p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Joined: {member.joinedDate.toLocaleDateString()}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Projects Tab */}\n      {activeTab === 'projects' && (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Team Projects</h2>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Project\n            </Button>\n          </div>\n          \n          {projects.map((project) => (\n            <Card key={project.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <h3 className=\"font-semibold\">{project.name}</h3>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getProjectStatusColor(project.status)}`}>\n                        {project.status.charAt(0).toUpperCase() + project.status.slice(1)}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{project.description}</p>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Progress</span>\n                      <span>{project.progress}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-600 h-2 rounded-full\" \n                        style={{ width: `${project.progress}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div>\n                      <span className=\"text-gray-600\">Assigned to: </span>\n                      <span className=\"font-medium\">\n                        {project.assignedTo.map(id => \n                          teamMembers.find(m => m.id === id)?.name\n                        ).join(', ')}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Due: </span>\n                      <span className=\"font-medium\">{project.dueDate.toLocaleDateString()}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Activity Tab */}\n      {activeTab === 'activity' && (\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Recent Activity</h2>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                {activities.map((activity) => (\n                  <div key={activity.id} className=\"flex items-center space-x-4 p-3 border rounded-lg\">\n                    <div className=\"flex-shrink-0\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">{activity.user}</span>\n                        {' '}{activity.action}{' '}\n                        <span className=\"font-medium\">{activity.target}</span>\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {activity.timestamp.toLocaleDateString()} at {activity.timestamp.toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Permissions Tab */}\n      {activeTab === 'permissions' && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold\">Role Permissions</h2>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {[\n              {\n                role: 'Owner',\n                icon: <Crown className=\"h-5 w-5 text-yellow-600\" />,\n                permissions: ['Full access to all features', 'Manage billing and subscription', 'Add/remove team members', 'Delete organization'],\n                color: 'border-yellow-200 bg-yellow-50',\n              },\n              {\n                role: 'Admin',\n                icon: <Shield className=\"h-5 w-5 text-blue-600\" />,\n                permissions: ['Manage websites and campaigns', 'View all analytics', 'Manage team members', 'Configure integrations'],\n                color: 'border-blue-200 bg-blue-50',\n              },\n              {\n                role: 'Editor',\n                icon: <Edit className=\"h-5 w-5 text-green-600\" />,\n                permissions: ['Create and edit websites', 'View assigned analytics', 'Comment on projects', 'Upload assets'],\n                color: 'border-green-200 bg-green-50',\n              },\n              {\n                role: 'Viewer',\n                icon: <Eye className=\"h-5 w-5 text-gray-600\" />,\n                permissions: ['View websites and campaigns', 'View basic analytics', 'Comment on projects', 'Export reports'],\n                color: 'border-gray-200 bg-gradient-to-br from-orange-900 via-orange-800 to-red-900',\n              },\n            ].map((roleInfo) => (\n              <Card key={roleInfo.role} className={roleInfo.color}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    {roleInfo.icon}\n                    <span>{roleInfo.role}</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {roleInfo.permissions.map((permission, index) => (\n                      <li key={index} className=\"flex items-center space-x-2 text-sm\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <span>{permission}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n",
    "lastModified": "2025-10-26T16:31:58.581Z"
  }
]